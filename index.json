{
  "api/DG.Tweening.DOTweenCYInstruction.WaitForCompletion.html": {
    "href": "api/DG.Tweening.DOTweenCYInstruction.WaitForCompletion.html",
    "title": "Class DOTweenCYInstruction.WaitForCompletion | |",
    "keywords": "Class DOTweenCYInstruction.WaitForCompletion Namespace DG.Tweening public class DOTweenCYInstruction.WaitForCompletion : CustomYieldInstruction Inheritance object DOTweenCYInstruction.WaitForCompletion Constructors WaitForCompletion(Tween) public WaitForCompletion(Tween tween) Parameters tween Tween Properties keepWaiting public override bool keepWaiting { get; } Property Value bool"
  },
  "api/DG.Tweening.DOTweenCYInstruction.WaitForElapsedLoops.html": {
    "href": "api/DG.Tweening.DOTweenCYInstruction.WaitForElapsedLoops.html",
    "title": "Class DOTweenCYInstruction.WaitForElapsedLoops | |",
    "keywords": "Class DOTweenCYInstruction.WaitForElapsedLoops Namespace DG.Tweening public class DOTweenCYInstruction.WaitForElapsedLoops : CustomYieldInstruction Inheritance object DOTweenCYInstruction.WaitForElapsedLoops Constructors WaitForElapsedLoops(Tween, int) public WaitForElapsedLoops(Tween tween, int elapsedLoops) Parameters tween Tween elapsedLoops int Properties keepWaiting public override bool keepWaiting { get; } Property Value bool"
  },
  "api/DG.Tweening.DOTweenCYInstruction.WaitForKill.html": {
    "href": "api/DG.Tweening.DOTweenCYInstruction.WaitForKill.html",
    "title": "Class DOTweenCYInstruction.WaitForKill | |",
    "keywords": "Class DOTweenCYInstruction.WaitForKill Namespace DG.Tweening public class DOTweenCYInstruction.WaitForKill : CustomYieldInstruction Inheritance object DOTweenCYInstruction.WaitForKill Constructors WaitForKill(Tween) public WaitForKill(Tween tween) Parameters tween Tween Properties keepWaiting public override bool keepWaiting { get; } Property Value bool"
  },
  "api/DG.Tweening.DOTweenCYInstruction.WaitForPosition.html": {
    "href": "api/DG.Tweening.DOTweenCYInstruction.WaitForPosition.html",
    "title": "Class DOTweenCYInstruction.WaitForPosition | |",
    "keywords": "Class DOTweenCYInstruction.WaitForPosition Namespace DG.Tweening public class DOTweenCYInstruction.WaitForPosition : CustomYieldInstruction Inheritance object DOTweenCYInstruction.WaitForPosition Constructors WaitForPosition(Tween, float) public WaitForPosition(Tween tween, float position) Parameters tween Tween position float Properties keepWaiting public override bool keepWaiting { get; } Property Value bool"
  },
  "api/DG.Tweening.DOTweenCYInstruction.WaitForRewind.html": {
    "href": "api/DG.Tweening.DOTweenCYInstruction.WaitForRewind.html",
    "title": "Class DOTweenCYInstruction.WaitForRewind | |",
    "keywords": "Class DOTweenCYInstruction.WaitForRewind Namespace DG.Tweening public class DOTweenCYInstruction.WaitForRewind : CustomYieldInstruction Inheritance object DOTweenCYInstruction.WaitForRewind Constructors WaitForRewind(Tween) public WaitForRewind(Tween tween) Parameters tween Tween Properties keepWaiting public override bool keepWaiting { get; } Property Value bool"
  },
  "api/DG.Tweening.DOTweenCYInstruction.WaitForStart.html": {
    "href": "api/DG.Tweening.DOTweenCYInstruction.WaitForStart.html",
    "title": "Class DOTweenCYInstruction.WaitForStart | |",
    "keywords": "Class DOTweenCYInstruction.WaitForStart Namespace DG.Tweening public class DOTweenCYInstruction.WaitForStart : CustomYieldInstruction Inheritance object DOTweenCYInstruction.WaitForStart Constructors WaitForStart(Tween) public WaitForStart(Tween tween) Parameters tween Tween Properties keepWaiting public override bool keepWaiting { get; } Property Value bool"
  },
  "api/DG.Tweening.DOTweenCYInstruction.html": {
    "href": "api/DG.Tweening.DOTweenCYInstruction.html",
    "title": "Class DOTweenCYInstruction | |",
    "keywords": "Class DOTweenCYInstruction Namespace DG.Tweening public static class DOTweenCYInstruction Inheritance object DOTweenCYInstruction Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString()"
  },
  "api/DG.Tweening.DOTweenModuleAudio.html": {
    "href": "api/DG.Tweening.DOTweenModuleAudio.html",
    "title": "Class DOTweenModuleAudio | |",
    "keywords": "Class DOTweenModuleAudio Namespace DG.Tweening public static class DOTweenModuleAudio Inheritance object DOTweenModuleAudio Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods DOComplete(AudioMixer, bool) Completes all tweens that have this target as a reference (meaning tweens that were started from this target, or that had this target added as an Id) and returns the total number of tweens completed (meaning the tweens that don't have infinite loops and were not already complete) public static int DOComplete(this AudioMixer target, bool withCallbacks = false) Parameters target AudioMixer withCallbacks bool For Sequences only: if TRUE also internal Sequence callbacks will be fired, otherwise they will be ignored Returns int DOFade(AudioSource, float, float) Tweens an AudioSource's volume to the given value. Also stores the AudioSource as the tween's target so it can be used for filtered operations public static TweenerCore<float, float, FloatOptions> DOFade(this AudioSource target, float endValue, float duration) Parameters target AudioSource endValue float The end value to reach (0 to 1) duration float The duration of the tween Returns TweenerCore<float, float, FloatOptions> DOFlip(AudioMixer) Flips the direction (backwards if it was going forward or viceversa) of all tweens that have this target as a reference (meaning tweens that were started from this target, or that had this target added as an Id) and returns the total number of tweens flipped. public static int DOFlip(this AudioMixer target) Parameters target AudioMixer Returns int DOGoto(AudioMixer, float, bool) Sends to the given position all tweens that have this target as a reference (meaning tweens that were started from this target, or that had this target added as an Id) and returns the total number of tweens involved. public static int DOGoto(this AudioMixer target, float to, bool andPlay = false) Parameters target AudioMixer to float Time position to reach (if higher than the whole tween duration the tween will simply reach its end) andPlay bool If TRUE will play the tween after reaching the given position, otherwise it will pause it Returns int DOKill(AudioMixer, bool) Kills all tweens that have this target as a reference (meaning tweens that were started from this target, or that had this target added as an Id) and returns the total number of tweens killed. public static int DOKill(this AudioMixer target, bool complete = false) Parameters target AudioMixer complete bool If TRUE completes the tween before killing it Returns int DOPause(AudioMixer) Pauses all tweens that have this target as a reference (meaning tweens that were started from this target, or that had this target added as an Id) and returns the total number of tweens paused. public static int DOPause(this AudioMixer target) Parameters target AudioMixer Returns int DOPitch(AudioSource, float, float) Tweens an AudioSource's pitch to the given value. Also stores the AudioSource as the tween's target so it can be used for filtered operations public static TweenerCore<float, float, FloatOptions> DOPitch(this AudioSource target, float endValue, float duration) Parameters target AudioSource endValue float The end value to reach duration float The duration of the tween Returns TweenerCore<float, float, FloatOptions> DOPlay(AudioMixer) Plays all tweens that have this target as a reference (meaning tweens that were started from this target, or that had this target added as an Id) and returns the total number of tweens played. public static int DOPlay(this AudioMixer target) Parameters target AudioMixer Returns int DOPlayBackwards(AudioMixer) Plays backwards all tweens that have this target as a reference (meaning tweens that were started from this target, or that had this target added as an Id) and returns the total number of tweens played. public static int DOPlayBackwards(this AudioMixer target) Parameters target AudioMixer Returns int DOPlayForward(AudioMixer) Plays forward all tweens that have this target as a reference (meaning tweens that were started from this target, or that had this target added as an Id) and returns the total number of tweens played. public static int DOPlayForward(this AudioMixer target) Parameters target AudioMixer Returns int DORestart(AudioMixer) Restarts all tweens that have this target as a reference (meaning tweens that were started from this target, or that had this target added as an Id) and returns the total number of tweens restarted. public static int DORestart(this AudioMixer target) Parameters target AudioMixer Returns int DORewind(AudioMixer) Rewinds all tweens that have this target as a reference (meaning tweens that were started from this target, or that had this target added as an Id) and returns the total number of tweens rewinded. public static int DORewind(this AudioMixer target) Parameters target AudioMixer Returns int DOSetFloat(AudioMixer, string, float, float) Tweens an AudioMixer's exposed float to the given value. Also stores the AudioMixer as the tween's target so it can be used for filtered operations. Note that you need to manually expose a float in an AudioMixerGroup in order to be able to tween it from an AudioMixer. public static TweenerCore<float, float, FloatOptions> DOSetFloat(this AudioMixer target, string floatName, float endValue, float duration) Parameters target AudioMixer floatName string Name given to the exposed float to set endValue float The end value to reach duration float The duration of the tween Returns TweenerCore<float, float, FloatOptions> DOSmoothRewind(AudioMixer) Smoothly rewinds all tweens that have this target as a reference (meaning tweens that were started from this target, or that had this target added as an Id) and returns the total number of tweens rewinded. public static int DOSmoothRewind(this AudioMixer target) Parameters target AudioMixer Returns int DOTogglePause(AudioMixer) Toggles the paused state (plays if it was paused, pauses if it was playing) of all tweens that have this target as a reference (meaning tweens that were started from this target, or that had this target added as an Id) and returns the total number of tweens involved. public static int DOTogglePause(this AudioMixer target) Parameters target AudioMixer Returns int"
  },
  "api/DG.Tweening.DOTweenModulePhysics.html": {
    "href": "api/DG.Tweening.DOTweenModulePhysics.html",
    "title": "Class DOTweenModulePhysics | |",
    "keywords": "Class DOTweenModulePhysics Namespace DG.Tweening public static class DOTweenModulePhysics Inheritance object DOTweenModulePhysics Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods DOJump(Rigidbody, Vector3, float, int, float, bool) Tweens a Rigidbody's position to the given value, while also applying a jump effect along the Y axis. Returns a Sequence instead of a Tweener. Also stores the Rigidbody as the tween's target so it can be used for filtered operations public static Sequence DOJump(this Rigidbody target, Vector3 endValue, float jumpPower, int numJumps, float duration, bool snapping = false) Parameters target Rigidbody endValue Vector3 The end value to reach jumpPower float Power of the jump (the max height of the jump is represented by this plus the final Y offset) numJumps int Total number of jumps duration float The duration of the tween snapping bool If TRUE the tween will smoothly snap all values to integers Returns Sequence DOLocalPath(Rigidbody, Vector3[], float, PathType, PathMode, int, Color?) Tweens a Rigidbody's localPosition through the given path waypoints, using the chosen path algorithm. Also stores the Rigidbody as the tween's target so it can be used for filtered operations NOTE: to tween a rigidbody correctly it should be set to kinematic at least while being tweened. BEWARE: doesn't work on Windows Phone store (waiting for Unity to fix their own bug). If you plan to publish there you should use a regular transform.DOLocalPath. public static TweenerCore<Vector3, Path, PathOptions> DOLocalPath(this Rigidbody target, Vector3[] path, float duration, PathType pathType = null, PathMode pathMode = null, int resolution = 10, Color? gizmoColor = null) Parameters target Rigidbody path Vector3[] The waypoint to go through duration float The duration of the tween pathType PathType The type of path: Linear (straight path), CatmullRom (curved CatmullRom path) or CubicBezier (curved with control points) pathMode PathMode The path mode: 3D, side-scroller 2D, top-down 2D resolution int The resolution of the path: higher resolutions make for more detailed curved paths but are more expensive. Defaults to 10, but a value of 5 is usually enough if you don't have dramatic long curves between waypoints gizmoColor Color? The color of the path (shown when gizmos are active in the Play panel and the tween is running) Returns TweenerCore<Vector3, Path, PathOptions> DOLookAt(Rigidbody, Vector3, float, AxisConstraint, Vector3?) Tweens a Rigidbody's rotation so that it will look towards the given position. Also stores the rigidbody as the tween's target so it can be used for filtered operations public static TweenerCore<Quaternion, Vector3, QuaternionOptions> DOLookAt(this Rigidbody target, Vector3 towards, float duration, AxisConstraint axisConstraint = null, Vector3? up = null) Parameters target Rigidbody towards Vector3 The position to look at duration float The duration of the tween axisConstraint AxisConstraint Eventual axis constraint for the rotation up Vector3? The vector that defines in which direction up is (default: Vector3.up) Returns TweenerCore<Quaternion, Vector3, QuaternionOptions> DOMove(Rigidbody, Vector3, float, bool) Tweens a Rigidbody's position to the given value. Also stores the rigidbody as the tween's target so it can be used for filtered operations public static TweenerCore<Vector3, Vector3, VectorOptions> DOMove(this Rigidbody target, Vector3 endValue, float duration, bool snapping = false) Parameters target Rigidbody endValue Vector3 The end value to reach duration float The duration of the tween snapping bool If TRUE the tween will smoothly snap all values to integers Returns TweenerCore<Vector3, Vector3, VectorOptions> DOMoveX(Rigidbody, float, float, bool) Tweens a Rigidbody's X position to the given value. Also stores the rigidbody as the tween's target so it can be used for filtered operations public static TweenerCore<Vector3, Vector3, VectorOptions> DOMoveX(this Rigidbody target, float endValue, float duration, bool snapping = false) Parameters target Rigidbody endValue float The end value to reach duration float The duration of the tween snapping bool If TRUE the tween will smoothly snap all values to integers Returns TweenerCore<Vector3, Vector3, VectorOptions> DOMoveY(Rigidbody, float, float, bool) Tweens a Rigidbody's Y position to the given value. Also stores the rigidbody as the tween's target so it can be used for filtered operations public static TweenerCore<Vector3, Vector3, VectorOptions> DOMoveY(this Rigidbody target, float endValue, float duration, bool snapping = false) Parameters target Rigidbody endValue float The end value to reach duration float The duration of the tween snapping bool If TRUE the tween will smoothly snap all values to integers Returns TweenerCore<Vector3, Vector3, VectorOptions> DOMoveZ(Rigidbody, float, float, bool) Tweens a Rigidbody's Z position to the given value. Also stores the rigidbody as the tween's target so it can be used for filtered operations public static TweenerCore<Vector3, Vector3, VectorOptions> DOMoveZ(this Rigidbody target, float endValue, float duration, bool snapping = false) Parameters target Rigidbody endValue float The end value to reach duration float The duration of the tween snapping bool If TRUE the tween will smoothly snap all values to integers Returns TweenerCore<Vector3, Vector3, VectorOptions> DOPath(Rigidbody, Vector3[], float, PathType, PathMode, int, Color?) Tweens a Rigidbody's position through the given path waypoints, using the chosen path algorithm. Also stores the Rigidbody as the tween's target so it can be used for filtered operations. NOTE: to tween a rigidbody correctly it should be set to kinematic at least while being tweened. BEWARE: doesn't work on Windows Phone store (waiting for Unity to fix their own bug). If you plan to publish there you should use a regular transform.DOPath. public static TweenerCore<Vector3, Path, PathOptions> DOPath(this Rigidbody target, Vector3[] path, float duration, PathType pathType = null, PathMode pathMode = null, int resolution = 10, Color? gizmoColor = null) Parameters target Rigidbody path Vector3[] The waypoints to go through duration float The duration of the tween pathType PathType The type of path: Linear (straight path), CatmullRom (curved CatmullRom path) or CubicBezier (curved with control points) pathMode PathMode The path mode: 3D, side-scroller 2D, top-down 2D resolution int The resolution of the path (useless in case of Linear paths): higher resolutions make for more detailed curved paths but are more expensive. Defaults to 10, but a value of 5 is usually enough if you don't have dramatic long curves between waypoints gizmoColor Color? The color of the path (shown when gizmos are active in the Play panel and the tween is running) Returns TweenerCore<Vector3, Path, PathOptions> DORotate(Rigidbody, Vector3, float, RotateMode) Tweens a Rigidbody's rotation to the given value. Also stores the rigidbody as the tween's target so it can be used for filtered operations public static TweenerCore<Quaternion, Vector3, QuaternionOptions> DORotate(this Rigidbody target, Vector3 endValue, float duration, RotateMode mode = null) Parameters target Rigidbody endValue Vector3 The end value to reach duration float The duration of the tween mode RotateMode Rotation mode Returns TweenerCore<Quaternion, Vector3, QuaternionOptions>"
  },
  "api/DG.Tweening.DOTweenModulePhysics2D.html": {
    "href": "api/DG.Tweening.DOTweenModulePhysics2D.html",
    "title": "Class DOTweenModulePhysics2D | |",
    "keywords": "Class DOTweenModulePhysics2D Namespace DG.Tweening public static class DOTweenModulePhysics2D Inheritance object DOTweenModulePhysics2D Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods DOJump(Rigidbody2D, Vector2, float, int, float, bool) Tweens a Rigidbody2D's position to the given value, while also applying a jump effect along the Y axis. Returns a Sequence instead of a Tweener. Also stores the Rigidbody2D as the tween's target so it can be used for filtered operations. IMPORTANT: a rigidbody2D can't be animated in a jump arc using MovePosition, so the tween will directly set the position public static Sequence DOJump(this Rigidbody2D target, Vector2 endValue, float jumpPower, int numJumps, float duration, bool snapping = false) Parameters target Rigidbody2D endValue Vector2 The end value to reach jumpPower float Power of the jump (the max height of the jump is represented by this plus the final Y offset) numJumps int Total number of jumps duration float The duration of the tween snapping bool If TRUE the tween will smoothly snap all values to integers Returns Sequence DOLocalPath(Rigidbody2D, Vector2[], float, PathType, PathMode, int, Color?) Tweens a Rigidbody2D's localPosition through the given path waypoints, using the chosen path algorithm. Also stores the Rigidbody2D as the tween's target so it can be used for filtered operations NOTE: to tween a Rigidbody2D correctly it should be set to kinematic at least while being tweened. BEWARE: doesn't work on Windows Phone store (waiting for Unity to fix their own bug). If you plan to publish there you should use a regular transform.DOLocalPath. public static TweenerCore<Vector3, Path, PathOptions> DOLocalPath(this Rigidbody2D target, Vector2[] path, float duration, PathType pathType = null, PathMode pathMode = null, int resolution = 10, Color? gizmoColor = null) Parameters target Rigidbody2D path Vector2[] The waypoint to go through duration float The duration of the tween pathType PathType The type of path: Linear (straight path), CatmullRom (curved CatmullRom path) or CubicBezier (curved with control points) pathMode PathMode The path mode: 3D, side-scroller 2D, top-down 2D resolution int The resolution of the path: higher resolutions make for more detailed curved paths but are more expensive. Defaults to 10, but a value of 5 is usually enough if you don't have dramatic long curves between waypoints gizmoColor Color? The color of the path (shown when gizmos are active in the Play panel and the tween is running) Returns TweenerCore<Vector3, Path, PathOptions> DOMove(Rigidbody2D, Vector2, float, bool) Tweens a Rigidbody2D's position to the given value. Also stores the Rigidbody2D as the tween's target so it can be used for filtered operations public static TweenerCore<Vector2, Vector2, VectorOptions> DOMove(this Rigidbody2D target, Vector2 endValue, float duration, bool snapping = false) Parameters target Rigidbody2D endValue Vector2 The end value to reach duration float The duration of the tween snapping bool If TRUE the tween will smoothly snap all values to integers Returns TweenerCore<Vector2, Vector2, VectorOptions> DOMoveX(Rigidbody2D, float, float, bool) Tweens a Rigidbody2D's X position to the given value. Also stores the Rigidbody2D as the tween's target so it can be used for filtered operations public static TweenerCore<Vector2, Vector2, VectorOptions> DOMoveX(this Rigidbody2D target, float endValue, float duration, bool snapping = false) Parameters target Rigidbody2D endValue float The end value to reach duration float The duration of the tween snapping bool If TRUE the tween will smoothly snap all values to integers Returns TweenerCore<Vector2, Vector2, VectorOptions> DOMoveY(Rigidbody2D, float, float, bool) Tweens a Rigidbody2D's Y position to the given value. Also stores the Rigidbody2D as the tween's target so it can be used for filtered operations public static TweenerCore<Vector2, Vector2, VectorOptions> DOMoveY(this Rigidbody2D target, float endValue, float duration, bool snapping = false) Parameters target Rigidbody2D endValue float The end value to reach duration float The duration of the tween snapping bool If TRUE the tween will smoothly snap all values to integers Returns TweenerCore<Vector2, Vector2, VectorOptions> DOPath(Rigidbody2D, Vector2[], float, PathType, PathMode, int, Color?) Tweens a Rigidbody2D's position through the given path waypoints, using the chosen path algorithm. Also stores the Rigidbody2D as the tween's target so it can be used for filtered operations. NOTE: to tween a Rigidbody2D correctly it should be set to kinematic at least while being tweened. BEWARE: doesn't work on Windows Phone store (waiting for Unity to fix their own bug). If you plan to publish there you should use a regular transform.DOPath. public static TweenerCore<Vector3, Path, PathOptions> DOPath(this Rigidbody2D target, Vector2[] path, float duration, PathType pathType = null, PathMode pathMode = null, int resolution = 10, Color? gizmoColor = null) Parameters target Rigidbody2D path Vector2[] The waypoints to go through duration float The duration of the tween pathType PathType The type of path: Linear (straight path), CatmullRom (curved CatmullRom path) or CubicBezier (curved with control points) pathMode PathMode The path mode: 3D, side-scroller 2D, top-down 2D resolution int The resolution of the path (useless in case of Linear paths): higher resolutions make for more detailed curved paths but are more expensive. Defaults to 10, but a value of 5 is usually enough if you don't have dramatic long curves between waypoints gizmoColor Color? The color of the path (shown when gizmos are active in the Play panel and the tween is running) Returns TweenerCore<Vector3, Path, PathOptions> DORotate(Rigidbody2D, float, float) Tweens a Rigidbody2D's rotation to the given value. Also stores the Rigidbody2D as the tween's target so it can be used for filtered operations public static TweenerCore<float, float, FloatOptions> DORotate(this Rigidbody2D target, float endValue, float duration) Parameters target Rigidbody2D endValue float The end value to reach duration float The duration of the tween Returns TweenerCore<float, float, FloatOptions>"
  },
  "api/DG.Tweening.DOTweenModuleSprite.html": {
    "href": "api/DG.Tweening.DOTweenModuleSprite.html",
    "title": "Class DOTweenModuleSprite | |",
    "keywords": "Class DOTweenModuleSprite Namespace DG.Tweening public static class DOTweenModuleSprite Inheritance object DOTweenModuleSprite Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods DOBlendableColor(SpriteRenderer, Color, float) Tweens a SpriteRenderer's color to the given value, in a way that allows other DOBlendableColor tweens to work together on the same target, instead than fight each other as multiple DOColor would do. Also stores the SpriteRenderer as the tween's target so it can be used for filtered operations public static Tweener DOBlendableColor(this SpriteRenderer target, Color endValue, float duration) Parameters target SpriteRenderer endValue Color The value to tween to duration float The duration of the tween Returns Tweener DOColor(SpriteRenderer, Color, float) Tweens a SpriteRenderer's color to the given value. Also stores the spriteRenderer as the tween's target so it can be used for filtered operations public static TweenerCore<Color, Color, ColorOptions> DOColor(this SpriteRenderer target, Color endValue, float duration) Parameters target SpriteRenderer endValue Color The end value to reach duration float The duration of the tween Returns TweenerCore<Color, Color, ColorOptions> DOFade(SpriteRenderer, float, float) Tweens a Material's alpha color to the given value. Also stores the spriteRenderer as the tween's target so it can be used for filtered operations public static TweenerCore<Color, Color, ColorOptions> DOFade(this SpriteRenderer target, float endValue, float duration) Parameters target SpriteRenderer endValue float The end value to reach duration float The duration of the tween Returns TweenerCore<Color, Color, ColorOptions> DOGradientColor(SpriteRenderer, Gradient, float) Tweens a SpriteRenderer's color using the given gradient (NOTE 1: only uses the colors of the gradient, not the alphas - NOTE 2: creates a Sequence, not a Tweener). Also stores the image as the tween's target so it can be used for filtered operations public static Sequence DOGradientColor(this SpriteRenderer target, Gradient gradient, float duration) Parameters target SpriteRenderer gradient Gradient The gradient to use duration float The duration of the tween Returns Sequence"
  },
  "api/DG.Tweening.DOTweenModuleUI.Utils.html": {
    "href": "api/DG.Tweening.DOTweenModuleUI.Utils.html",
    "title": "Class DOTweenModuleUI.Utils | |",
    "keywords": "Class DOTweenModuleUI.Utils Namespace DG.Tweening public static class DOTweenModuleUI.Utils Inheritance object DOTweenModuleUI.Utils Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods SwitchToRectTransform(RectTransform, RectTransform) Converts the anchoredPosition of the first RectTransform to the second RectTransform, taking into consideration offset, anchors and pivot, and returns the new anchoredPosition public static Vector2 SwitchToRectTransform(RectTransform from, RectTransform to) Parameters from RectTransform to RectTransform Returns Vector2"
  },
  "api/DG.Tweening.DOTweenModuleUI.html": {
    "href": "api/DG.Tweening.DOTweenModuleUI.html",
    "title": "Class DOTweenModuleUI | |",
    "keywords": "Class DOTweenModuleUI Namespace DG.Tweening public static class DOTweenModuleUI Inheritance object DOTweenModuleUI Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods DOAnchorMax(RectTransform, Vector2, float, bool) Tweens a RectTransform's anchorMax to the given value. Also stores the RectTransform as the tween's target so it can be used for filtered operations public static TweenerCore<Vector2, Vector2, VectorOptions> DOAnchorMax(this RectTransform target, Vector2 endValue, float duration, bool snapping = false) Parameters target RectTransform endValue Vector2 The end value to reach duration float The duration of the tween snapping bool If TRUE the tween will smoothly snap all values to integers Returns TweenerCore<Vector2, Vector2, VectorOptions> DOAnchorMin(RectTransform, Vector2, float, bool) Tweens a RectTransform's anchorMin to the given value. Also stores the RectTransform as the tween's target so it can be used for filtered operations public static TweenerCore<Vector2, Vector2, VectorOptions> DOAnchorMin(this RectTransform target, Vector2 endValue, float duration, bool snapping = false) Parameters target RectTransform endValue Vector2 The end value to reach duration float The duration of the tween snapping bool If TRUE the tween will smoothly snap all values to integers Returns TweenerCore<Vector2, Vector2, VectorOptions> DOAnchorPos(RectTransform, Vector2, float, bool) Tweens a RectTransform's anchoredPosition to the given value. Also stores the RectTransform as the tween's target so it can be used for filtered operations public static TweenerCore<Vector2, Vector2, VectorOptions> DOAnchorPos(this RectTransform target, Vector2 endValue, float duration, bool snapping = false) Parameters target RectTransform endValue Vector2 The end value to reach duration float The duration of the tween snapping bool If TRUE the tween will smoothly snap all values to integers Returns TweenerCore<Vector2, Vector2, VectorOptions> DOAnchorPos3D(RectTransform, Vector3, float, bool) Tweens a RectTransform's anchoredPosition3D to the given value. Also stores the RectTransform as the tween's target so it can be used for filtered operations public static TweenerCore<Vector3, Vector3, VectorOptions> DOAnchorPos3D(this RectTransform target, Vector3 endValue, float duration, bool snapping = false) Parameters target RectTransform endValue Vector3 The end value to reach duration float The duration of the tween snapping bool If TRUE the tween will smoothly snap all values to integers Returns TweenerCore<Vector3, Vector3, VectorOptions> DOAnchorPos3DX(RectTransform, float, float, bool) Tweens a RectTransform's anchoredPosition3D X to the given value. Also stores the RectTransform as the tween's target so it can be used for filtered operations public static TweenerCore<Vector3, Vector3, VectorOptions> DOAnchorPos3DX(this RectTransform target, float endValue, float duration, bool snapping = false) Parameters target RectTransform endValue float The end value to reach duration float The duration of the tween snapping bool If TRUE the tween will smoothly snap all values to integers Returns TweenerCore<Vector3, Vector3, VectorOptions> DOAnchorPos3DY(RectTransform, float, float, bool) Tweens a RectTransform's anchoredPosition3D Y to the given value. Also stores the RectTransform as the tween's target so it can be used for filtered operations public static TweenerCore<Vector3, Vector3, VectorOptions> DOAnchorPos3DY(this RectTransform target, float endValue, float duration, bool snapping = false) Parameters target RectTransform endValue float The end value to reach duration float The duration of the tween snapping bool If TRUE the tween will smoothly snap all values to integers Returns TweenerCore<Vector3, Vector3, VectorOptions> DOAnchorPos3DZ(RectTransform, float, float, bool) Tweens a RectTransform's anchoredPosition3D Z to the given value. Also stores the RectTransform as the tween's target so it can be used for filtered operations public static TweenerCore<Vector3, Vector3, VectorOptions> DOAnchorPos3DZ(this RectTransform target, float endValue, float duration, bool snapping = false) Parameters target RectTransform endValue float The end value to reach duration float The duration of the tween snapping bool If TRUE the tween will smoothly snap all values to integers Returns TweenerCore<Vector3, Vector3, VectorOptions> DOAnchorPosX(RectTransform, float, float, bool) Tweens a RectTransform's anchoredPosition X to the given value. Also stores the RectTransform as the tween's target so it can be used for filtered operations public static TweenerCore<Vector2, Vector2, VectorOptions> DOAnchorPosX(this RectTransform target, float endValue, float duration, bool snapping = false) Parameters target RectTransform endValue float The end value to reach duration float The duration of the tween snapping bool If TRUE the tween will smoothly snap all values to integers Returns TweenerCore<Vector2, Vector2, VectorOptions> DOAnchorPosY(RectTransform, float, float, bool) Tweens a RectTransform's anchoredPosition Y to the given value. Also stores the RectTransform as the tween's target so it can be used for filtered operations public static TweenerCore<Vector2, Vector2, VectorOptions> DOAnchorPosY(this RectTransform target, float endValue, float duration, bool snapping = false) Parameters target RectTransform endValue float The end value to reach duration float The duration of the tween snapping bool If TRUE the tween will smoothly snap all values to integers Returns TweenerCore<Vector2, Vector2, VectorOptions> DOBlendableColor(Graphic, Color, float) Tweens a Graphic's color to the given value, in a way that allows other DOBlendableColor tweens to work together on the same target, instead than fight each other as multiple DOColor would do. Also stores the Graphic as the tween's target so it can be used for filtered operations public static Tweener DOBlendableColor(this Graphic target, Color endValue, float duration) Parameters target Graphic endValue Color The value to tween to duration float The duration of the tween Returns Tweener DOBlendableColor(Image, Color, float) Tweens a Image's color to the given value, in a way that allows other DOBlendableColor tweens to work together on the same target, instead than fight each other as multiple DOColor would do. Also stores the Image as the tween's target so it can be used for filtered operations public static Tweener DOBlendableColor(this Image target, Color endValue, float duration) Parameters target Image endValue Color The value to tween to duration float The duration of the tween Returns Tweener DOBlendableColor(Text, Color, float) Tweens a Text's color BY the given value, in a way that allows other DOBlendableColor tweens to work together on the same target, instead than fight each other as multiple DOColor would do. Also stores the Text as the tween's target so it can be used for filtered operations public static Tweener DOBlendableColor(this UnityEngine.UI.Text target, Color endValue, float duration) Parameters target Text endValue Color The value to tween to duration float The duration of the tween Returns Tweener DOColor(Graphic, Color, float) Tweens an Graphic's color to the given value. Also stores the image as the tween's target so it can be used for filtered operations public static TweenerCore<Color, Color, ColorOptions> DOColor(this Graphic target, Color endValue, float duration) Parameters target Graphic endValue Color The end value to reach duration float The duration of the tween Returns TweenerCore<Color, Color, ColorOptions> DOColor(Image, Color, float) Tweens an Image's color to the given value. Also stores the image as the tween's target so it can be used for filtered operations public static TweenerCore<Color, Color, ColorOptions> DOColor(this Image target, Color endValue, float duration) Parameters target Image endValue Color The end value to reach duration float The duration of the tween Returns TweenerCore<Color, Color, ColorOptions> DOColor(Outline, Color, float) Tweens a Outline's effectColor to the given value. Also stores the Outline as the tween's target so it can be used for filtered operations public static TweenerCore<Color, Color, ColorOptions> DOColor(this UnityEngine.UI.Outline target, Color endValue, float duration) Parameters target Outline endValue Color The end value to reach duration float The duration of the tween Returns TweenerCore<Color, Color, ColorOptions> DOColor(Text, Color, float) Tweens a Text's color to the given value. Also stores the Text as the tween's target so it can be used for filtered operations public static TweenerCore<Color, Color, ColorOptions> DOColor(this UnityEngine.UI.Text target, Color endValue, float duration) Parameters target Text endValue Color The end value to reach duration float The duration of the tween Returns TweenerCore<Color, Color, ColorOptions> DOCounter(Text, int, int, float, bool, CultureInfo) Tweens a Text's text from one integer to another, with options for thousands separators public static TweenerCore<int, int, NoOptions> DOCounter(this UnityEngine.UI.Text target, int fromValue, int endValue, float duration, bool addThousandsSeparator = true, CultureInfo culture = null) Parameters target Text fromValue int The value to start from endValue int The end value to reach duration float The duration of the tween addThousandsSeparator bool If TRUE (default) also adds thousands separators culture CultureInfo The CultureInfo to use (InvariantCulture if NULL) Returns TweenerCore<int, int, NoOptions> DOFade(CanvasGroup, float, float) Tweens a CanvasGroup's alpha color to the given value. Also stores the canvasGroup as the tween's target so it can be used for filtered operations public static TweenerCore<float, float, FloatOptions> DOFade(this CanvasGroup target, float endValue, float duration) Parameters target CanvasGroup endValue float The end value to reach duration float The duration of the tween Returns TweenerCore<float, float, FloatOptions> DOFade(Graphic, float, float) Tweens an Graphic's alpha color to the given value. Also stores the image as the tween's target so it can be used for filtered operations public static TweenerCore<Color, Color, ColorOptions> DOFade(this Graphic target, float endValue, float duration) Parameters target Graphic endValue float The end value to reach duration float The duration of the tween Returns TweenerCore<Color, Color, ColorOptions> DOFade(Image, float, float) Tweens an Image's alpha color to the given value. Also stores the image as the tween's target so it can be used for filtered operations public static TweenerCore<Color, Color, ColorOptions> DOFade(this Image target, float endValue, float duration) Parameters target Image endValue float The end value to reach duration float The duration of the tween Returns TweenerCore<Color, Color, ColorOptions> DOFade(Outline, float, float) Tweens a Outline's effectColor alpha to the given value. Also stores the Outline as the tween's target so it can be used for filtered operations public static TweenerCore<Color, Color, ColorOptions> DOFade(this UnityEngine.UI.Outline target, float endValue, float duration) Parameters target Outline endValue float The end value to reach duration float The duration of the tween Returns TweenerCore<Color, Color, ColorOptions> DOFade(Text, float, float) Tweens a Text's alpha color to the given value. Also stores the Text as the tween's target so it can be used for filtered operations public static TweenerCore<Color, Color, ColorOptions> DOFade(this UnityEngine.UI.Text target, float endValue, float duration) Parameters target Text endValue float The end value to reach duration float The duration of the tween Returns TweenerCore<Color, Color, ColorOptions> DOFillAmount(Image, float, float) Tweens an Image's fillAmount to the given value. Also stores the image as the tween's target so it can be used for filtered operations public static TweenerCore<float, float, FloatOptions> DOFillAmount(this Image target, float endValue, float duration) Parameters target Image endValue float The end value to reach (0 to 1) duration float The duration of the tween Returns TweenerCore<float, float, FloatOptions> DOFlexibleSize(LayoutElement, Vector2, float, bool) Tweens an LayoutElement's flexibleWidth/Height to the given value. Also stores the LayoutElement as the tween's target so it can be used for filtered operations public static TweenerCore<Vector2, Vector2, VectorOptions> DOFlexibleSize(this LayoutElement target, Vector2 endValue, float duration, bool snapping = false) Parameters target LayoutElement endValue Vector2 The end value to reach duration float The duration of the tween snapping bool If TRUE the tween will smoothly snap all values to integers Returns TweenerCore<Vector2, Vector2, VectorOptions> DOGradientColor(Image, Gradient, float) Tweens an Image's colors using the given gradient (NOTE 1: only uses the colors of the gradient, not the alphas - NOTE 2: creates a Sequence, not a Tweener). Also stores the image as the tween's target so it can be used for filtered operations public static Sequence DOGradientColor(this Image target, Gradient gradient, float duration) Parameters target Image gradient Gradient The gradient to use duration float The duration of the tween Returns Sequence DOHorizontalNormalizedPos(ScrollRect, float, float, bool) Tweens a ScrollRect's horizontalNormalizedPosition to the given value. Also stores the ScrollRect as the tween's target so it can be used for filtered operations public static Tweener DOHorizontalNormalizedPos(this ScrollRect target, float endValue, float duration, bool snapping = false) Parameters target ScrollRect endValue float The end value to reach duration float The duration of the tween snapping bool If TRUE the tween will smoothly snap all values to integers Returns Tweener DOJumpAnchorPos(RectTransform, Vector2, float, int, float, bool) Tweens a RectTransform's anchoredPosition to the given value, while also applying a jump effect along the Y axis. Returns a Sequence instead of a Tweener. Also stores the RectTransform as the tween's target so it can be used for filtered operations public static Sequence DOJumpAnchorPos(this RectTransform target, Vector2 endValue, float jumpPower, int numJumps, float duration, bool snapping = false) Parameters target RectTransform endValue Vector2 The end value to reach jumpPower float Power of the jump (the max height of the jump is represented by this plus the final Y offset) numJumps int Total number of jumps duration float The duration of the tween snapping bool If TRUE the tween will smoothly snap all values to integers Returns Sequence DOMinSize(LayoutElement, Vector2, float, bool) Tweens an LayoutElement's minWidth/Height to the given value. Also stores the LayoutElement as the tween's target so it can be used for filtered operations public static TweenerCore<Vector2, Vector2, VectorOptions> DOMinSize(this LayoutElement target, Vector2 endValue, float duration, bool snapping = false) Parameters target LayoutElement endValue Vector2 The end value to reach duration float The duration of the tween snapping bool If TRUE the tween will smoothly snap all values to integers Returns TweenerCore<Vector2, Vector2, VectorOptions> DONormalizedPos(ScrollRect, Vector2, float, bool) Tweens a ScrollRect's horizontal/verticalNormalizedPosition to the given value. Also stores the ScrollRect as the tween's target so it can be used for filtered operations public static Tweener DONormalizedPos(this ScrollRect target, Vector2 endValue, float duration, bool snapping = false) Parameters target ScrollRect endValue Vector2 The end value to reach duration float The duration of the tween snapping bool If TRUE the tween will smoothly snap all values to integers Returns Tweener DOPivot(RectTransform, Vector2, float) Tweens a RectTransform's pivot to the given value. Also stores the RectTransform as the tween's target so it can be used for filtered operations public static TweenerCore<Vector2, Vector2, VectorOptions> DOPivot(this RectTransform target, Vector2 endValue, float duration) Parameters target RectTransform endValue Vector2 The end value to reach duration float The duration of the tween Returns TweenerCore<Vector2, Vector2, VectorOptions> DOPivotX(RectTransform, float, float) Tweens a RectTransform's pivot X to the given value. Also stores the RectTransform as the tween's target so it can be used for filtered operations public static TweenerCore<Vector2, Vector2, VectorOptions> DOPivotX(this RectTransform target, float endValue, float duration) Parameters target RectTransform endValue float The end value to reach duration float The duration of the tween Returns TweenerCore<Vector2, Vector2, VectorOptions> DOPivotY(RectTransform, float, float) Tweens a RectTransform's pivot Y to the given value. Also stores the RectTransform as the tween's target so it can be used for filtered operations public static TweenerCore<Vector2, Vector2, VectorOptions> DOPivotY(this RectTransform target, float endValue, float duration) Parameters target RectTransform endValue float The end value to reach duration float The duration of the tween Returns TweenerCore<Vector2, Vector2, VectorOptions> DOPreferredSize(LayoutElement, Vector2, float, bool) Tweens an LayoutElement's preferredWidth/Height to the given value. Also stores the LayoutElement as the tween's target so it can be used for filtered operations public static TweenerCore<Vector2, Vector2, VectorOptions> DOPreferredSize(this LayoutElement target, Vector2 endValue, float duration, bool snapping = false) Parameters target LayoutElement endValue Vector2 The end value to reach duration float The duration of the tween snapping bool If TRUE the tween will smoothly snap all values to integers Returns TweenerCore<Vector2, Vector2, VectorOptions> DOPunchAnchorPos(RectTransform, Vector2, float, int, float, bool) Punches a RectTransform's anchoredPosition towards the given direction and then back to the starting one as if it was connected to the starting position via an elastic. Also stores the RectTransform as the tween's target so it can be used for filtered operations public static Tweener DOPunchAnchorPos(this RectTransform target, Vector2 punch, float duration, int vibrato = 10, float elasticity = 1, bool snapping = false) Parameters target RectTransform punch Vector2 The direction and strength of the punch (added to the RectTransform's current position) duration float The duration of the tween vibrato int Indicates how much will the punch vibrate elasticity float Represents how much (0 to 1) the vector will go beyond the starting position when bouncing backwards. 1 creates a full oscillation between the punch direction and the opposite direction, while 0 oscillates only between the punch and the start position snapping bool If TRUE the tween will smoothly snap all values to integers Returns Tweener DOScale(Outline, Vector2, float) Tweens a Outline's effectDistance to the given value. Also stores the Outline as the tween's target so it can be used for filtered operations public static TweenerCore<Vector2, Vector2, VectorOptions> DOScale(this UnityEngine.UI.Outline target, Vector2 endValue, float duration) Parameters target Outline endValue Vector2 The end value to reach duration float The duration of the tween Returns TweenerCore<Vector2, Vector2, VectorOptions> DOShakeAnchorPos(RectTransform, float, float, int, float, bool, bool, ShakeRandomnessMode) Shakes a RectTransform's anchoredPosition with the given values. Also stores the RectTransform as the tween's target so it can be used for filtered operations public static Tweener DOShakeAnchorPos(this RectTransform target, float duration, float strength = 100, int vibrato = 10, float randomness = 90, bool snapping = false, bool fadeOut = true, ShakeRandomnessMode randomnessMode = null) Parameters target RectTransform duration float The duration of the tween strength float The shake strength vibrato int Indicates how much will the shake vibrate randomness float Indicates how much the shake will be random (0 to 180 - values higher than 90 kind of suck, so beware). Setting it to 0 will shake along a single direction. snapping bool If TRUE the tween will smoothly snap all values to integers fadeOut bool If TRUE the shake will automatically fadeOut smoothly within the tween's duration, otherwise it will not randomnessMode ShakeRandomnessMode Randomness mode Returns Tweener DOShakeAnchorPos(RectTransform, float, Vector2, int, float, bool, bool, ShakeRandomnessMode) Shakes a RectTransform's anchoredPosition with the given values. Also stores the RectTransform as the tween's target so it can be used for filtered operations public static Tweener DOShakeAnchorPos(this RectTransform target, float duration, Vector2 strength, int vibrato = 10, float randomness = 90, bool snapping = false, bool fadeOut = true, ShakeRandomnessMode randomnessMode = null) Parameters target RectTransform duration float The duration of the tween strength Vector2 The shake strength on each axis vibrato int Indicates how much will the shake vibrate randomness float Indicates how much the shake will be random (0 to 180 - values higher than 90 kind of suck, so beware). Setting it to 0 will shake along a single direction. snapping bool If TRUE the tween will smoothly snap all values to integers fadeOut bool If TRUE the shake will automatically fadeOut smoothly within the tween's duration, otherwise it will not randomnessMode ShakeRandomnessMode Randomness mode Returns Tweener DOShapeCircle(RectTransform, Vector2, float, float, bool, bool) Tweens a RectTransform's anchoredPosition so that it draws a circle around the given center. Also stores the RectTransform as the tween's target so it can be used for filtered operations. IMPORTANT: SetFrom(value) requires a Vector2 instead of a float, where the X property represents the \"from degrees value\" public static TweenerCore<Vector2, Vector2, CircleOptions> DOShapeCircle(this RectTransform target, Vector2 center, float endValueDegrees, float duration, bool relativeCenter = false, bool snapping = false) Parameters target RectTransform center Vector2 Circle-center/pivot around which to rotate (in UI anchoredPosition coordinates) endValueDegrees float The end value degrees to reach (to rotate counter-clockwise pass a negative value) duration float The duration of the tween relativeCenter bool If TRUE the center coordinates will be considered as relative to the target's current anchoredPosition snapping bool If TRUE the tween will smoothly snap all values to integers Returns TweenerCore<Vector2, Vector2, CircleOptions> DOSizeDelta(RectTransform, Vector2, float, bool) Tweens a RectTransform's sizeDelta to the given value. Also stores the RectTransform as the tween's target so it can be used for filtered operations public static TweenerCore<Vector2, Vector2, VectorOptions> DOSizeDelta(this RectTransform target, Vector2 endValue, float duration, bool snapping = false) Parameters target RectTransform endValue Vector2 The end value to reach duration float The duration of the tween snapping bool If TRUE the tween will smoothly snap all values to integers Returns TweenerCore<Vector2, Vector2, VectorOptions> DOText(Text, string, float, bool, ScrambleMode, string) Tweens a Text's text to the given value. Also stores the Text as the tween's target so it can be used for filtered operations public static TweenerCore<string, string, StringOptions> DOText(this UnityEngine.UI.Text target, string endValue, float duration, bool richTextEnabled = true, ScrambleMode scrambleMode = null, string scrambleChars = null) Parameters target Text endValue string The end string to tween to duration float The duration of the tween richTextEnabled bool If TRUE (default), rich text will be interpreted correctly while animated, otherwise all tags will be considered as normal text scrambleMode ScrambleMode The type of scramble mode to use, if any scrambleChars string A string containing the characters to use for scrambling. Use as many characters as possible (minimum 10) because DOTween uses a fast scramble mode which gives better results with more characters. Leave it to NULL (default) to use default ones Returns TweenerCore<string, string, StringOptions> DOValue(Slider, float, float, bool) Tweens a Slider's value to the given value. Also stores the Slider as the tween's target so it can be used for filtered operations public static TweenerCore<float, float, FloatOptions> DOValue(this Slider target, float endValue, float duration, bool snapping = false) Parameters target Slider endValue float The end value to reach duration float The duration of the tween snapping bool If TRUE the tween will smoothly snap all values to integers Returns TweenerCore<float, float, FloatOptions> DOVerticalNormalizedPos(ScrollRect, float, float, bool) Tweens a ScrollRect's verticalNormalizedPosition to the given value. Also stores the ScrollRect as the tween's target so it can be used for filtered operations public static Tweener DOVerticalNormalizedPos(this ScrollRect target, float endValue, float duration, bool snapping = false) Parameters target ScrollRect endValue float The end value to reach duration float The duration of the tween snapping bool If TRUE the tween will smoothly snap all values to integers Returns Tweener"
  },
  "api/DG.Tweening.DOTweenModuleUnityVersion.html": {
    "href": "api/DG.Tweening.DOTweenModuleUnityVersion.html",
    "title": "Class DOTweenModuleUnityVersion | |",
    "keywords": "Class DOTweenModuleUnityVersion Namespace DG.Tweening Shortcuts/functions that are not strictly related to specific Modules but are available only on some Unity versions public static class DOTweenModuleUnityVersion Inheritance object DOTweenModuleUnityVersion Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods DOGradientColor(Material, Gradient, float) Tweens a Material's color using the given gradient (NOTE 1: only uses the colors of the gradient, not the alphas - NOTE 2: creates a Sequence, not a Tweener). Also stores the image as the tween's target so it can be used for filtered operations public static Sequence DOGradientColor(this Material target, Gradient gradient, float duration) Parameters target Material gradient Gradient The gradient to use duration float The duration of the tween Returns Sequence DOGradientColor(Material, Gradient, string, float) Tweens a Material's named color property using the given gradient (NOTE 1: only uses the colors of the gradient, not the alphas - NOTE 2: creates a Sequence, not a Tweener). Also stores the image as the tween's target so it can be used for filtered operations public static Sequence DOGradientColor(this Material target, Gradient gradient, string property, float duration) Parameters target Material gradient Gradient The gradient to use property string The name of the material property to tween (like _Tint or _SpecColor) duration float The duration of the tween Returns Sequence WaitForCompletion(Tween, bool) Returns a CustomYieldInstruction that waits until the tween is killed or complete. It can be used inside a coroutine as a yield. Example usage: yield return myTween.WaitForCompletion(true); public static CustomYieldInstruction WaitForCompletion(this Tween t, bool returnCustomYieldInstruction) Parameters t Tween returnCustomYieldInstruction bool Returns CustomYieldInstruction WaitForElapsedLoops(Tween, int, bool) Returns a CustomYieldInstruction that waits until the tween is killed or has gone through the given amount of loops. It can be used inside a coroutine as a yield. Example usage: yield return myTween.WaitForElapsedLoops(2); public static CustomYieldInstruction WaitForElapsedLoops(this Tween t, int elapsedLoops, bool returnCustomYieldInstruction) Parameters t Tween elapsedLoops int Elapsed loops to wait for returnCustomYieldInstruction bool Returns CustomYieldInstruction WaitForKill(Tween, bool) Returns a CustomYieldInstruction that waits until the tween is killed. It can be used inside a coroutine as a yield. Example usage: yield return myTween.WaitForKill(); public static CustomYieldInstruction WaitForKill(this Tween t, bool returnCustomYieldInstruction) Parameters t Tween returnCustomYieldInstruction bool Returns CustomYieldInstruction WaitForPosition(Tween, float, bool) Returns a CustomYieldInstruction that waits until the tween is killed or has reached the given time position (loops included, delays excluded). It can be used inside a coroutine as a yield. Example usage: yield return myTween.WaitForPosition(2.5f); public static CustomYieldInstruction WaitForPosition(this Tween t, float position, bool returnCustomYieldInstruction) Parameters t Tween position float Position (loops included, delays excluded) to wait for returnCustomYieldInstruction bool Returns CustomYieldInstruction WaitForRewind(Tween, bool) Returns a CustomYieldInstruction that waits until the tween is killed or rewinded. It can be used inside a coroutine as a yield. Example usage: yield return myTween.WaitForRewind(); public static CustomYieldInstruction WaitForRewind(this Tween t, bool returnCustomYieldInstruction) Parameters t Tween returnCustomYieldInstruction bool Returns CustomYieldInstruction WaitForStart(Tween, bool) Returns a CustomYieldInstruction that waits until the tween is killed or started (meaning when the tween is set in a playing state the first time, after any eventual delay). It can be used inside a coroutine as a yield. Example usage: yield return myTween.WaitForStart(); public static CustomYieldInstruction WaitForStart(this Tween t, bool returnCustomYieldInstruction) Parameters t Tween returnCustomYieldInstruction bool Returns CustomYieldInstruction"
  },
  "api/DG.Tweening.DOTweenModuleUtils.Physics.html": {
    "href": "api/DG.Tweening.DOTweenModuleUtils.Physics.html",
    "title": "Class DOTweenModuleUtils.Physics | |",
    "keywords": "Class DOTweenModuleUtils.Physics Namespace DG.Tweening public static class DOTweenModuleUtils.Physics Inheritance object DOTweenModuleUtils.Physics Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods CreateDOTweenPathTween(MonoBehaviour, bool, bool, Path, float, PathMode) public static TweenerCore<Vector3, Path, PathOptions> CreateDOTweenPathTween(MonoBehaviour target, bool tweenRigidbody, bool isLocal, Path path, float duration, PathMode pathMode) Parameters target MonoBehaviour tweenRigidbody bool isLocal bool path Path duration float pathMode PathMode Returns TweenerCore<Vector3, Path, PathOptions> HasRigidbody(Component) public static bool HasRigidbody(Component target) Parameters target Component Returns bool HasRigidbody2D(Component) public static bool HasRigidbody2D(Component target) Parameters target Component Returns bool SetOrientationOnPath(PathOptions, Tween, Quaternion, Transform) public static void SetOrientationOnPath(PathOptions options, Tween t, Quaternion newRot, Transform trans) Parameters options PathOptions t Tween newRot Quaternion trans Transform"
  },
  "api/DG.Tweening.DOTweenModuleUtils.html": {
    "href": "api/DG.Tweening.DOTweenModuleUtils.html",
    "title": "Class DOTweenModuleUtils | |",
    "keywords": "Class DOTweenModuleUtils Namespace DG.Tweening Utility functions that deal with available Modules. Modules defines: DOTAUDIO DOTPHYSICS DOTPHYSICS2D DOTSPRITE DOTUI Extra defines set and used for implementation of external assets: DOTWEEN_TMP ► TextMesh Pro DOTWEEN_TK2D ► 2D Toolkit public static class DOTweenModuleUtils Inheritance object DOTweenModuleUtils Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Init() Called via Reflection by DOTweenComponent on Awake public static void Init()"
  },
  "api/DG.Tweening.html": {
    "href": "api/DG.Tweening.html",
    "title": "Namespace DG.Tweening | |",
    "keywords": "Namespace DG.Tweening Classes DOTweenCYInstruction DOTweenCYInstruction.WaitForCompletion DOTweenCYInstruction.WaitForElapsedLoops DOTweenCYInstruction.WaitForKill DOTweenCYInstruction.WaitForPosition DOTweenCYInstruction.WaitForRewind DOTweenCYInstruction.WaitForStart DOTweenModuleAudio DOTweenModulePhysics DOTweenModulePhysics2D DOTweenModuleSprite DOTweenModuleUI DOTweenModuleUI.Utils DOTweenModuleUnityVersion Shortcuts/functions that are not strictly related to specific Modules but are available only on some Unity versions DOTweenModuleUtils Utility functions that deal with available Modules. Modules defines: DOTAUDIO DOTPHYSICS DOTPHYSICS2D DOTSPRITE DOTUI Extra defines set and used for implementation of external assets: DOTWEEN_TMP ► TextMesh Pro DOTWEEN_TK2D ► 2D Toolkit DOTweenModuleUtils.Physics"
  },
  "api/Studio23.SS2.InteractionSystem.Abstract.ClosableBase.html": {
    "href": "api/Studio23.SS2.InteractionSystem.Abstract.ClosableBase.html",
    "title": "Class ClosableBase | |",
    "keywords": "Class ClosableBase Namespace Studio23.SS2.InteractionSystem.Abstract public abstract class ClosableBase : InteractableBase Inheritance object InteractableBase ClosableBase Derived ClosableDoor Inherited Members InteractableBase.OnInteractionStarted InteractableBase.OnInteractionPaused InteractableBase.OnInteractionResumed InteractableBase.OnInteractionCompleted InteractableBase.CurState InteractableBase.LastEvaluationResult InteractableBase.InteractionHoldTime InteractableBase.GetPromptSuffix() InteractableBase.DoDisabledInteraction(CancellationToken) InteractableBase.InitializeInteraction() InteractableBase.PauseInteraction() InteractableBase.CompleteInteraction() InteractableBase.ResumeInteraction() InteractableBase.EvaluateInteractionConditions(PlayerInteractionFinder) Fields OnClosed public UnityEvent OnClosed Field Value UnityEvent _objectName protected string _objectName Field Value string Properties CanBeInterrupted Prevents another subinteraction from starting when this is running public override bool CanBeInterrupted { get; } Property Value bool InputButton public override InputButtonSlot InputButton { get; } Property Value InputButtonSlot Methods DoCloseInteraction(CancellationToken) protected abstract UniTask DoCloseInteraction(CancellationToken token) Parameters token CancellationToken Returns UniTask DoNormalInteraction(CancellationToken) The actual async interaction task The interactable should assume that it can be interrupted any time during interaction public override UniTask DoNormalInteraction(CancellationToken token) Parameters token CancellationToken Returns UniTask EvaluateInteractionConditionsInternal(PlayerInteractionFinder) Subclasses should override this to return their condition eval result protected override InteractionConditionResult EvaluateInteractionConditionsInternal(PlayerInteractionFinder finder) Parameters finder PlayerInteractionFinder Returns InteractionConditionResult GetPromptPrefix() Interaction prompt prefix(ex: \"Inspect\") public override string GetPromptPrefix() Returns string HandleInteractionCompleted() Called when an interaction is completed protected override void HandleInteractionCompleted() HandleInteractionPause() Called when an interaction is paused protected override void HandleInteractionPause() HandleInteractionResumed() Called when a paused interaction is resumed protected override void HandleInteractionResumed() HandleInteractionStarted() Called before the interaction task is started protected override void HandleInteractionStarted() Initialize() Called on start() protected override void Initialize() SnapToClosedState() public virtual void SnapToClosedState() SnapToOpenState() public virtual void SnapToOpenState()"
  },
  "api/Studio23.SS2.InteractionSystem.Abstract.InputPromptsControllerBase.html": {
    "href": "api/Studio23.SS2.InteractionSystem.Abstract.InputPromptsControllerBase.html",
    "title": "Class InputPromptsControllerBase | |",
    "keywords": "Class InputPromptsControllerBase Namespace Studio23.SS2.InteractionSystem.Abstract public abstract class InputPromptsControllerBase : MonoBehaviour Inheritance object InputPromptsControllerBase Derived InputPromptsController Fields OnInteractableConfirmationCancelled public UnityEvent<InteractableBase> OnInteractableConfirmationCancelled Field Value UnityEvent<InteractableBase> OnInteractableConfirmationStarted public UnityEvent<InteractableBase> OnInteractableConfirmationStarted Field Value UnityEvent<InteractableBase> OnInteractableConfirmed public UnityEvent<InteractableBase> OnInteractableConfirmed Field Value UnityEvent<InteractableBase> Methods SetInteractables(List<InteractableBase>) public abstract void SetInteractables(List<InteractableBase> interactables) Parameters interactables List<InteractableBase>"
  },
  "api/Studio23.SS2.InteractionSystem.Abstract.InspectableBase.html": {
    "href": "api/Studio23.SS2.InteractionSystem.Abstract.InspectableBase.html",
    "title": "Class InspectableBase | |",
    "keywords": "Class InspectableBase Namespace Studio23.SS2.InteractionSystem.Abstract public abstract class InspectableBase : InteractableBase Inheritance object InteractableBase InspectableBase Derived TestInspectable Inherited Members InteractableBase.OnInteractionStarted InteractableBase.OnInteractionPaused InteractableBase.OnInteractionResumed InteractableBase.OnInteractionCompleted InteractableBase.CurState InteractableBase.LastEvaluationResult InteractableBase.InteractionHoldTime InteractableBase.Initialize() InteractableBase.HandleInteractionStarted() InteractableBase.HandleInteractionPause() InteractableBase.HandleInteractionResumed() InteractableBase.HandleInteractionCompleted() InteractableBase.GetPromptSuffix() InteractableBase.DoDisabledInteraction(CancellationToken) InteractableBase.InitializeInteraction() InteractableBase.PauseInteraction() InteractableBase.CompleteInteraction() InteractableBase.ResumeInteraction() InteractableBase.EvaluateInteractionConditions(PlayerInteractionFinder) InteractableBase.EvaluateInteractionConditionsInternal(PlayerInteractionFinder) Fields _inspectionOffset protected Vector3 _inspectionOffset Field Value Vector3 _inspectionRotationSensitivity protected float _inspectionRotationSensitivity Field Value float _inspectionTarget protected Transform _inspectionTarget Field Value Transform _objectName protected string _objectName Field Value string Properties CanBeInterrupted Prevents another subinteraction from starting when this is running public override bool CanBeInterrupted { get; } Property Value bool InputButton public override InputButtonSlot InputButton { get; } Property Value InputButtonSlot InspectionOffset public Vector3 InspectionOffset { get; } Property Value Vector3 InspectionRotationSensitivity public float InspectionRotationSensitivity { get; } Property Value float InspectionScale public Vector3 InspectionScale { get; } Property Value Vector3 InspectionTargetMaxOffset public float InspectionTargetMaxOffset { get; } Property Value float InspectionTargetMaxZoom public float InspectionTargetMaxZoom { get; } Property Value float OriginalInspectionTargetScale public Vector3 OriginalInspectionTargetScale { get; } Property Value Vector3 Methods Awake() protected virtual void Awake() DoNormalInteraction(CancellationToken) The actual async interaction task The interactable should assume that it can be interrupted any time during interaction public override UniTask DoNormalInteraction(CancellationToken token) Parameters token CancellationToken Returns UniTask GetInspectionTarget() public Transform GetInspectionTarget() Returns Transform GetPromptPrefix() Interaction prompt prefix(ex: \"Inspect\") public override string GetPromptPrefix() Returns string"
  },
  "api/Studio23.SS2.InteractionSystem.Abstract.InteractableBase.html": {
    "href": "api/Studio23.SS2.InteractionSystem.Abstract.InteractableBase.html",
    "title": "Class InteractableBase | |",
    "keywords": "Class InteractableBase Namespace Studio23.SS2.InteractionSystem.Abstract public abstract class InteractableBase : MonoBehaviour Inheritance object InteractableBase Derived ClosableBase InspectableBase ItemPickupBase OpenableBase TogglableBase Fields OnInteractionCompleted public UnityEvent<InteractableBase> OnInteractionCompleted Field Value UnityEvent<InteractableBase> OnInteractionPaused public UnityEvent<InteractableBase> OnInteractionPaused Field Value UnityEvent<InteractableBase> OnInteractionResumed public UnityEvent<InteractableBase> OnInteractionResumed Field Value UnityEvent<InteractableBase> OnInteractionStarted public UnityEvent<InteractableBase> OnInteractionStarted Field Value UnityEvent<InteractableBase> Properties CanBeInterrupted Prevents another subinteraction from starting when this is running public abstract bool CanBeInterrupted { get; } Property Value bool CurState public InteractionState CurState { get; } Property Value InteractionState InputButton public abstract InputButtonSlot InputButton { get; } Property Value InputButtonSlot InteractionHoldTime public float InteractionHoldTime { get; } Property Value float LastEvaluationResult The InteractionConditionResult from last call of EvaluateInteractionConditions() public InteractionConditionResult LastEvaluationResult { get; } Property Value InteractionConditionResult Methods CompleteInteraction() public void CompleteInteraction() DoDisabledInteraction(CancellationToken) public abstract UniTask DoDisabledInteraction(CancellationToken token) Parameters token CancellationToken Returns UniTask DoNormalInteraction(CancellationToken) The actual async interaction task The interactable should assume that it can be interrupted any time during interaction public abstract UniTask DoNormalInteraction(CancellationToken token) Parameters token CancellationToken Returns UniTask EvaluateInteractionConditions(PlayerInteractionFinder) External code should call this to evaluate the interaction conditions Subclasses should override the internal version of this. public InteractionConditionResult EvaluateInteractionConditions(PlayerInteractionFinder interactionFinder) Parameters interactionFinder PlayerInteractionFinder Returns InteractionConditionResult EvaluateInteractionConditionsInternal(PlayerInteractionFinder) Subclasses should override this to return their condition eval result protected virtual InteractionConditionResult EvaluateInteractionConditionsInternal(PlayerInteractionFinder interactionFinder) Parameters interactionFinder PlayerInteractionFinder Returns InteractionConditionResult GetPromptPrefix() Interaction prompt prefix(ex: \"Inspect\") public abstract string GetPromptPrefix() Returns string GetPromptSuffix() Interaction prompt suffix that appears after the prompt public abstract string GetPromptSuffix() Returns string HandleInteractionCompleted() Called when an interaction is completed protected abstract void HandleInteractionCompleted() HandleInteractionPause() Called when an interaction is paused protected abstract void HandleInteractionPause() HandleInteractionResumed() Called when a paused interaction is resumed protected abstract void HandleInteractionResumed() HandleInteractionStarted() Called before the interaction task is started protected abstract void HandleInteractionStarted() Initialize() Called on start() protected abstract void Initialize() InitializeInteraction() public void InitializeInteraction() PauseInteraction() public void PauseInteraction() ResumeInteraction() public void ResumeInteraction()"
  },
  "api/Studio23.SS2.InteractionSystem.Abstract.InteractionCondition.html": {
    "href": "api/Studio23.SS2.InteractionSystem.Abstract.InteractionCondition.html",
    "title": "Class InteractionCondition | |",
    "keywords": "Class InteractionCondition Namespace Studio23.SS2.InteractionSystem.Abstract [Serializable] public abstract class InteractionCondition Inheritance object InteractionCondition Derived TestInventoryInteractionCondition Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Evaluate(PlayerInteractionFinder) Returns whether this condition is true for the interaction context For now we assume interaction context is just the player interaction finder public abstract InteractionConditionResult Evaluate(PlayerInteractionFinder playerInteractionFinder) Parameters playerInteractionFinder PlayerInteractionFinder Returns InteractionConditionResult"
  },
  "api/Studio23.SS2.InteractionSystem.Abstract.ItemPickupBase.html": {
    "href": "api/Studio23.SS2.InteractionSystem.Abstract.ItemPickupBase.html",
    "title": "Class ItemPickupBase | |",
    "keywords": "Class ItemPickupBase Namespace Studio23.SS2.InteractionSystem.Abstract public abstract class ItemPickupBase : InteractableBase Inheritance object InteractableBase ItemPickupBase Derived TestItemPickup Inherited Members InteractableBase.OnInteractionStarted InteractableBase.OnInteractionPaused InteractableBase.OnInteractionResumed InteractableBase.OnInteractionCompleted InteractableBase.CurState InteractableBase.LastEvaluationResult InteractableBase.InteractionHoldTime InteractableBase.Initialize() InteractableBase.HandleInteractionStarted() InteractableBase.HandleInteractionPause() InteractableBase.HandleInteractionResumed() InteractableBase.CanBeInterrupted InteractableBase.DoNormalInteraction(CancellationToken) InteractableBase.DoDisabledInteraction(CancellationToken) InteractableBase.InitializeInteraction() InteractableBase.PauseInteraction() InteractableBase.CompleteInteraction() InteractableBase.ResumeInteraction() InteractableBase.EvaluateInteractionConditions(PlayerInteractionFinder) InteractableBase.EvaluateInteractionConditionsInternal(PlayerInteractionFinder) Properties InputButton public override InputButtonSlot InputButton { get; } Property Value InputButtonSlot PickUpName public abstract string PickUpName { get; } Property Value string Methods AddPickupToInventory() public virtual void AddPickupToInventory() GetPromptPrefix() Interaction prompt prefix(ex: \"Inspect\") public override string GetPromptPrefix() Returns string GetPromptSuffix() Interaction prompt suffix that appears after the prompt public override string GetPromptSuffix() Returns string HandleInteractionCompleted() Called when an interaction is completed protected override void HandleInteractionCompleted()"
  },
  "api/Studio23.SS2.InteractionSystem.Abstract.OpenableBase.html": {
    "href": "api/Studio23.SS2.InteractionSystem.Abstract.OpenableBase.html",
    "title": "Class OpenableBase | |",
    "keywords": "Class OpenableBase Namespace Studio23.SS2.InteractionSystem.Abstract public abstract class OpenableBase : InteractableBase Inheritance object InteractableBase OpenableBase Derived OpenableDoor Inherited Members InteractableBase.OnInteractionStarted InteractableBase.OnInteractionPaused InteractableBase.OnInteractionResumed InteractableBase.OnInteractionCompleted InteractableBase.CurState InteractableBase.LastEvaluationResult InteractableBase.InteractionHoldTime InteractableBase.DoDisabledInteraction(CancellationToken) InteractableBase.InitializeInteraction() InteractableBase.PauseInteraction() InteractableBase.CompleteInteraction() InteractableBase.ResumeInteraction() InteractableBase.EvaluateInteractionConditions(PlayerInteractionFinder) Fields OnOpened public UnityEvent OnOpened Field Value UnityEvent _objectName protected string _objectName Field Value string Properties CanBeInterrupted Prevents another subinteraction from starting when this is running public override bool CanBeInterrupted { get; } Property Value bool InputButton public override InputButtonSlot InputButton { get; } Property Value InputButtonSlot Methods DoNormalInteraction(CancellationToken) The actual async interaction task The interactable should assume that it can be interrupted any time during interaction public override UniTask DoNormalInteraction(CancellationToken token) Parameters token CancellationToken Returns UniTask DoOpenInteraction(CancellationToken) protected abstract UniTask DoOpenInteraction(CancellationToken token) Parameters token CancellationToken Returns UniTask EvaluateInteractionConditionsInternal(PlayerInteractionFinder) Subclasses should override this to return their condition eval result protected override InteractionConditionResult EvaluateInteractionConditionsInternal(PlayerInteractionFinder finder) Parameters finder PlayerInteractionFinder Returns InteractionConditionResult GetPromptPrefix() Interaction prompt prefix(ex: \"Inspect\") public override string GetPromptPrefix() Returns string GetPromptSuffix() Interaction prompt suffix that appears after the prompt public override string GetPromptSuffix() Returns string HandleInteractionCompleted() Called when an interaction is completed protected override void HandleInteractionCompleted() HandleInteractionPause() Called when an interaction is paused protected override void HandleInteractionPause() HandleInteractionResumed() Called when a paused interaction is resumed protected override void HandleInteractionResumed() HandleInteractionStarted() Called before the interaction task is started protected override void HandleInteractionStarted() Initialize() Called on start() protected override void Initialize() SnapToClosedState() public virtual void SnapToClosedState() SnapToOpenState() public virtual void SnapToOpenState()"
  },
  "api/Studio23.SS2.InteractionSystem.Abstract.TogglableBase.html": {
    "href": "api/Studio23.SS2.InteractionSystem.Abstract.TogglableBase.html",
    "title": "Class TogglableBase | |",
    "keywords": "Class TogglableBase Namespace Studio23.SS2.InteractionSystem.Abstract public abstract class TogglableBase : InteractableBase Inheritance object InteractableBase TogglableBase Derived BiWayDoor InstantSwitch Inherited Members InteractableBase.OnInteractionStarted InteractableBase.OnInteractionPaused InteractableBase.OnInteractionResumed InteractableBase.OnInteractionCompleted InteractableBase.CurState InteractableBase.LastEvaluationResult InteractableBase.InteractionHoldTime InteractableBase.HandleInteractionStarted() InteractableBase.HandleInteractionPause() InteractableBase.HandleInteractionResumed() InteractableBase.HandleInteractionCompleted() InteractableBase.DoDisabledInteraction(CancellationToken) InteractableBase.InitializeInteraction() InteractableBase.PauseInteraction() InteractableBase.CompleteInteraction() InteractableBase.ResumeInteraction() InteractableBase.EvaluateInteractionConditions(PlayerInteractionFinder) InteractableBase.EvaluateInteractionConditionsInternal(PlayerInteractionFinder) Fields _isActive protected bool _isActive Field Value bool _onDeactivated protected UnityEvent _onDeactivated Field Value UnityEvent Properties CanBeInterrupted Prevents another subinteraction from starting when this is running public override bool CanBeInterrupted { get; } Property Value bool InputButton public override InputButtonSlot InputButton { get; } Property Value InputButtonSlot IsActive public bool IsActive { get; } Property Value bool OnActivated public UnityEvent OnActivated { get; } Property Value UnityEvent OnDeactivated public UnityEvent OnDeactivated { get; } Property Value UnityEvent Methods DoActivateInteraction(CancellationToken) protected abstract UniTask DoActivateInteraction(CancellationToken cancellationToken) Parameters cancellationToken CancellationToken Returns UniTask DoDeactivateInteraction(CancellationToken) protected abstract UniTask DoDeactivateInteraction(CancellationToken cancellationToken) Parameters cancellationToken CancellationToken Returns UniTask DoNormalInteraction(CancellationToken) The actual async interaction task The interactable should assume that it can be interrupted any time during interaction public override UniTask DoNormalInteraction(CancellationToken token) Parameters token CancellationToken Returns UniTask GetPromptPrefix() Interaction prompt prefix(ex: \"Inspect\") public override string GetPromptPrefix() Returns string GetPromptSuffix() Interaction prompt suffix that appears after the prompt public override string GetPromptSuffix() Returns string Initialize() Called on start() protected override void Initialize() SnapToActivatedState() public abstract void SnapToActivatedState() SnapToDeactivatedState() public abstract void SnapToDeactivatedState() Toggle(CancellationToken) public UniTask Toggle(CancellationToken cancellationToken) Parameters cancellationToken CancellationToken Returns UniTask"
  },
  "api/Studio23.SS2.InteractionSystem.Abstract.html": {
    "href": "api/Studio23.SS2.InteractionSystem.Abstract.html",
    "title": "Namespace Studio23.SS2.InteractionSystem.Abstract | |",
    "keywords": "Namespace Studio23.SS2.InteractionSystem.Abstract Classes ClosableBase InputPromptsControllerBase InspectableBase InteractableBase InteractionCondition ItemPickupBase OpenableBase TogglableBase"
  },
  "api/Studio23.SS2.InteractionSystem.Core.InputPromptsController.html": {
    "href": "api/Studio23.SS2.InteractionSystem.Core.InputPromptsController.html",
    "title": "Class InputPromptsController | |",
    "keywords": "Class InputPromptsController Namespace Studio23.SS2.InteractionSystem.Core public class InputPromptsController : InputPromptsControllerBase Inheritance object InputPromptsControllerBase InputPromptsController Inherited Members InputPromptsControllerBase.OnInteractableConfirmed InputPromptsControllerBase.OnInteractableConfirmationStarted InputPromptsControllerBase.OnInteractableConfirmationCancelled Methods ConfirmInteraction(InteractableBase) public UniTask ConfirmInteraction(InteractableBase interactableBase) Parameters interactableBase InteractableBase Returns UniTask SetInteractables(List<InteractableBase>) public override void SetInteractables(List<InteractableBase> interactables) Parameters interactables List<InteractableBase>"
  },
  "api/Studio23.SS2.InteractionSystem.Core.InspectionManager.html": {
    "href": "api/Studio23.SS2.InteractionSystem.Core.InspectionManager.html",
    "title": "Class InspectionManager | |",
    "keywords": "Class InspectionManager Namespace Studio23.SS2.InteractionSystem.Core public class InspectionManager : MonoBehaviourSingletonPersistent<InspectionManager> Inheritance object InspectionManager Fields ExaminationXAxisInverted public bool ExaminationXAxisInverted Field Value bool ExaminationYAxisInverted public bool ExaminationYAxisInverted Field Value bool InspectionObjectParent public Transform InspectionObjectParent Field Value Transform Player public Transform Player Field Value Transform Methods Dlog(string, Object) public void Dlog(string message, UnityEngine.Object context = null) Parameters message string context Object HandleInspectableCompleted(InspectableBase) public void HandleInspectableCompleted(InspectableBase inspectable) Parameters inspectable InspectableBase HandleInspectablePaused(InspectableBase) public void HandleInspectablePaused(InspectableBase inspectable) Parameters inspectable InspectableBase HandleInspectableResumed(InspectableBase) public void HandleInspectableResumed(InspectableBase inspectable) Parameters inspectable InspectableBase HandleInteractionInitialize(InspectableBase) public void HandleInteractionInitialize(InspectableBase inspectable) Parameters inspectable InspectableBase ShowInspectable(InspectableBase, CancellationToken) public UniTask ShowInspectable(InspectableBase inspectable, CancellationToken token) Parameters inspectable InspectableBase token CancellationToken Returns UniTask initialize() protected override void initialize()"
  },
  "api/Studio23.SS2.InteractionSystem.Core.InteractionInputManager.html": {
    "href": "api/Studio23.SS2.InteractionSystem.Core.InteractionInputManager.html",
    "title": "Class InteractionInputManager | |",
    "keywords": "Class InteractionInputManager Namespace Studio23.SS2.InteractionSystem.Core public class InteractionInputManager : MonoBehaviourSingletonPersistent<InteractionInputManager> Inheritance object InteractionInputManager Fields Buttons public List<InputButtonSlot> Buttons Field Value List<InputButtonSlot> Properties Debug1Button public InputButtonSlot Debug1Button { get; } Property Value InputButtonSlot InspectButton public InputButtonSlot InspectButton { get; } Property Value InputButtonSlot InspectDragDelta public Vector2 InspectDragDelta { get; } Property Value Vector2 InspectResetButton public InputButtonSlot InspectResetButton { get; } Property Value InputButtonSlot InspectionDragButton public InputButtonSlot InspectionDragButton { get; } Property Value InputButtonSlot InspectionMoveInput public Vector2 InspectionMoveInput { get; } Property Value Vector2 InspectionZoomInput public float InspectionZoomInput { get; } Property Value float InteractCancelButton public InputButtonSlot InteractCancelButton { get; } Property Value InputButtonSlot PickupButton public InputButtonSlot PickupButton { get; } Property Value InputButtonSlot ToggleButton public InputButtonSlot ToggleButton { get; } Property Value InputButtonSlot Methods PlayModeExitCleanUp() public static void PlayModeExitCleanUp() initialize() protected override void initialize()"
  },
  "api/Studio23.SS2.InteractionSystem.Core.InteractionManager.html": {
    "href": "api/Studio23.SS2.InteractionSystem.Core.InteractionManager.html",
    "title": "Class InteractionManager | |",
    "keywords": "Class InteractionManager Namespace Studio23.SS2.InteractionSystem.Core public class InteractionManager : MonoBehaviourSingletonPersistent<InteractionManager> Inheritance object InteractionManager Fields IsDebug public bool IsDebug Field Value bool Properties CurrentInteractable public InteractableBase CurrentInteractable { get; } Property Value InteractableBase IsRunningInteraction public bool IsRunningInteraction { get; } Property Value bool Methods Dlog(string, Object) public void Dlog(string message, UnityEngine.Object context = null) Parameters message string context Object DoInteraction() public UniTask DoInteraction() Returns UniTask ShowNewInteractables(List<InteractableBase>) public void ShowNewInteractables(List<InteractableBase> interactables) Parameters interactables List<InteractableBase> StartNewInteraction(InteractableBase) public void StartNewInteraction(InteractableBase newInteractableBase) Parameters newInteractableBase InteractableBase initialize() protected override void initialize() Events OnInteractionChainEnded Fired when we complete all the interactions on the stack Or when we cancel the interaction confirmation without anything in the stack Not fired when subinteractions are completed public event Action OnInteractionChainEnded Event Type Action OnInteractionChainStarted Fired when we start the first interaction on the stack Not fired when subinteractions are started public event Action OnInteractionChainStarted Event Type Action"
  },
  "api/Studio23.SS2.InteractionSystem.Core.PlayerInteractionFinder.html": {
    "href": "api/Studio23.SS2.InteractionSystem.Core.PlayerInteractionFinder.html",
    "title": "Class PlayerInteractionFinder | |",
    "keywords": "Class PlayerInteractionFinder Namespace Studio23.SS2.InteractionSystem.Core Looks for Interactables on scene based on camera position and orientation public class PlayerInteractionFinder : MonoBehaviour Inheritance object PlayerInteractionFinder Properties InteractionFindDirection public Vector3 InteractionFindDirection { get; } Property Value Vector3 InteractionRayOrigin public Vector3 InteractionRayOrigin { get; } Property Value Vector3 Methods FindInteractables() Get list of interactables. #NOTE GC alloc every call Optimize if needed public List<InteractableBase> FindInteractables() Returns List<InteractableBase> a list of interactables SetCam(Camera) public void SetCam(Camera _cam) Parameters _cam Camera"
  },
  "api/Studio23.SS2.InteractionSystem.Core.html": {
    "href": "api/Studio23.SS2.InteractionSystem.Core.html",
    "title": "Namespace Studio23.SS2.InteractionSystem.Core | |",
    "keywords": "Namespace Studio23.SS2.InteractionSystem.Core Classes InputPromptsController InspectionManager InteractionInputManager InteractionManager PlayerInteractionFinder Looks for Interactables on scene based on camera position and orientation"
  },
  "api/Studio23.SS2.InteractionSystem.Data.InputPromptsModel.html": {
    "href": "api/Studio23.SS2.InteractionSystem.Data.InputPromptsModel.html",
    "title": "Class InputPromptsModel | |",
    "keywords": "Class InputPromptsModel Namespace Studio23.SS2.InteractionSystem.Data public class InputPromptsModel : MonoBehaviour Inheritance object InputPromptsModel Methods ClearPrompts() public void ClearPrompts() SetInputPrompts(List<InteractableBase>) public void SetInputPrompts(List<InteractableBase> prompts) Parameters prompts List<InteractableBase> TryGetRegisteredInteractable(InputButtonSlot, out InteractableBase) public bool TryGetRegisteredInteractable(InputButtonSlot button, out InteractableBase interactableBase) Parameters button InputButtonSlot interactableBase InteractableBase Returns bool Events OnPromptsChanged public event Action<InputPromptsModel> OnPromptsChanged Event Type Action<InputPromptsModel>"
  },
  "api/Studio23.SS2.InteractionSystem.Data.InteractionConditionResult.html": {
    "href": "api/Studio23.SS2.InteractionSystem.Data.InteractionConditionResult.html",
    "title": "Enum InteractionConditionResult | |",
    "keywords": "Enum InteractionConditionResult Namespace Studio23.SS2.InteractionSystem.Data public enum InteractionConditionResult Fields Disable = 1 Hide = 2 Show = 0"
  },
  "api/Studio23.SS2.InteractionSystem.Data.InteractionState.html": {
    "href": "api/Studio23.SS2.InteractionSystem.Data.InteractionState.html",
    "title": "Enum InteractionState | |",
    "keywords": "Enum InteractionState Namespace Studio23.SS2.InteractionSystem.Data public enum InteractionState Fields Active = 1 Inactive = 0 Paused = 2"
  },
  "api/Studio23.SS2.InteractionSystem.Data.html": {
    "href": "api/Studio23.SS2.InteractionSystem.Data.html",
    "title": "Namespace Studio23.SS2.InteractionSystem.Data | |",
    "keywords": "Namespace Studio23.SS2.InteractionSystem.Data Classes InputPromptsModel Enums InteractionConditionResult InteractionState"
  },
  "api/Studio23.SS2.InteractionSystem.Samples.Demo1.BasicInstantSwitch.html": {
    "href": "api/Studio23.SS2.InteractionSystem.Samples.Demo1.BasicInstantSwitch.html",
    "title": "Class BasicInstantSwitch | |",
    "keywords": "Class BasicInstantSwitch Namespace Studio23.SS2.InteractionSystem.Samples.Demo1 public class BasicInstantSwitch : InstantSwitch Inheritance object InteractableBase TogglableBase InstantSwitch BasicInstantSwitch Inherited Members InstantSwitch.HandleInteractionStarted() InstantSwitch.HandleInteractionPause() InstantSwitch.HandleInteractionResumed() InstantSwitch.HandleInteractionCompleted() TogglableBase._onDeactivated TogglableBase._isActive TogglableBase.IsActive TogglableBase.OnActivated TogglableBase.OnDeactivated TogglableBase.CanBeInterrupted TogglableBase.InputButton TogglableBase.Toggle(CancellationToken) TogglableBase.DoNormalInteraction(CancellationToken) TogglableBase.GetPromptPrefix() TogglableBase.GetPromptSuffix() InteractableBase.OnInteractionStarted InteractableBase.OnInteractionPaused InteractableBase.OnInteractionResumed InteractableBase.OnInteractionCompleted InteractableBase.CurState InteractableBase.LastEvaluationResult InteractableBase.InteractionHoldTime InteractableBase.InitializeInteraction() InteractableBase.PauseInteraction() InteractableBase.CompleteInteraction() InteractableBase.ResumeInteraction() InteractableBase.EvaluateInteractionConditions(PlayerInteractionFinder) InteractableBase.EvaluateInteractionConditionsInternal(PlayerInteractionFinder) Methods DoActivateInteraction(CancellationToken) protected override UniTask DoActivateInteraction(CancellationToken cancellationToken) Parameters cancellationToken CancellationToken Returns UniTask DoDeactivateInteraction(CancellationToken) protected override UniTask DoDeactivateInteraction(CancellationToken cancellationToken) Parameters cancellationToken CancellationToken Returns UniTask DoDisabledInteraction(CancellationToken) public override UniTask DoDisabledInteraction(CancellationToken token) Parameters token CancellationToken Returns UniTask Initialize() Called on start() protected override void Initialize() SnapToActivatedState() public override void SnapToActivatedState() SnapToDeactivatedState() public override void SnapToDeactivatedState()"
  },
  "api/Studio23.SS2.InteractionSystem.Samples.Demo1.BiWayDoor.html": {
    "href": "api/Studio23.SS2.InteractionSystem.Samples.Demo1.BiWayDoor.html",
    "title": "Class BiWayDoor | |",
    "keywords": "Class BiWayDoor Namespace Studio23.SS2.InteractionSystem.Samples.Demo1 public class BiWayDoor : TogglableBase Inheritance object InteractableBase TogglableBase BiWayDoor Inherited Members TogglableBase._onDeactivated TogglableBase._isActive TogglableBase.IsActive TogglableBase.OnActivated TogglableBase.OnDeactivated TogglableBase.CanBeInterrupted TogglableBase.InputButton TogglableBase.Toggle(CancellationToken) TogglableBase.DoNormalInteraction(CancellationToken) TogglableBase.GetPromptPrefix() TogglableBase.GetPromptSuffix() InteractableBase.OnInteractionStarted InteractableBase.OnInteractionPaused InteractableBase.OnInteractionResumed InteractableBase.OnInteractionCompleted InteractableBase.CurState InteractableBase.LastEvaluationResult InteractableBase.InteractionHoldTime InteractableBase.InitializeInteraction() InteractableBase.PauseInteraction() InteractableBase.CompleteInteraction() InteractableBase.ResumeInteraction() InteractableBase.EvaluateInteractionConditions(PlayerInteractionFinder) InteractableBase.EvaluateInteractionConditionsInternal(PlayerInteractionFinder) Fields DoorAnimTime public float DoorAnimTime Field Value float DoorObject public GameObject DoorObject Field Value GameObject Methods DoActivateInteraction(CancellationToken) protected override UniTask DoActivateInteraction(CancellationToken token) Parameters token CancellationToken Returns UniTask DoDeactivateInteraction(CancellationToken) protected override UniTask DoDeactivateInteraction(CancellationToken token) Parameters token CancellationToken Returns UniTask DoDisabledInteraction(CancellationToken) public override UniTask DoDisabledInteraction(CancellationToken token) Parameters token CancellationToken Returns UniTask HandleInteractionCompleted() Called when an interaction is completed protected override void HandleInteractionCompleted() HandleInteractionPause() Called when an interaction is paused protected override void HandleInteractionPause() HandleInteractionResumed() Called when a paused interaction is resumed protected override void HandleInteractionResumed() HandleInteractionStarted() Called before the interaction task is started protected override void HandleInteractionStarted() Initialize() Called on start() protected override void Initialize() SnapToActivatedState() public override void SnapToActivatedState() SnapToDeactivatedState() public override void SnapToDeactivatedState()"
  },
  "api/Studio23.SS2.InteractionSystem.Samples.Demo1.ClosableDoor.html": {
    "href": "api/Studio23.SS2.InteractionSystem.Samples.Demo1.ClosableDoor.html",
    "title": "Class ClosableDoor | |",
    "keywords": "Class ClosableDoor Namespace Studio23.SS2.InteractionSystem.Samples.Demo1 public class ClosableDoor : ClosableBase Inheritance object InteractableBase ClosableBase ClosableDoor Inherited Members ClosableBase._objectName ClosableBase.OnClosed ClosableBase.CanBeInterrupted ClosableBase.InputButton ClosableBase.HandleInteractionStarted() ClosableBase.HandleInteractionPause() ClosableBase.HandleInteractionResumed() ClosableBase.HandleInteractionCompleted() ClosableBase.DoNormalInteraction(CancellationToken) ClosableBase.EvaluateInteractionConditionsInternal(PlayerInteractionFinder) ClosableBase.GetPromptPrefix() ClosableBase.Initialize() InteractableBase.OnInteractionStarted InteractableBase.OnInteractionPaused InteractableBase.OnInteractionResumed InteractableBase.OnInteractionCompleted InteractableBase.CurState InteractableBase.LastEvaluationResult InteractableBase.InteractionHoldTime InteractableBase.InitializeInteraction() InteractableBase.PauseInteraction() InteractableBase.CompleteInteraction() InteractableBase.ResumeInteraction() InteractableBase.EvaluateInteractionConditions(PlayerInteractionFinder) Methods Awake() protected void Awake() DoCloseInteraction(CancellationToken) protected override UniTask DoCloseInteraction(CancellationToken token) Parameters token CancellationToken Returns UniTask DoDisabledInteraction(CancellationToken) public override UniTask DoDisabledInteraction(CancellationToken token) Parameters token CancellationToken Returns UniTask GetPromptSuffix() Interaction prompt suffix that appears after the prompt public override string GetPromptSuffix() Returns string SnapToClosedState() public override void SnapToClosedState() SnapToOpenState() public override void SnapToOpenState()"
  },
  "api/Studio23.SS2.InteractionSystem.Samples.Demo1.InstantSwitch.html": {
    "href": "api/Studio23.SS2.InteractionSystem.Samples.Demo1.InstantSwitch.html",
    "title": "Class InstantSwitch | |",
    "keywords": "Class InstantSwitch Namespace Studio23.SS2.InteractionSystem.Samples.Demo1 A basic switch that sends activation and deactivation events instantly public abstract class InstantSwitch : TogglableBase Inheritance object InteractableBase TogglableBase InstantSwitch Derived BasicInstantSwitch Inherited Members TogglableBase._onDeactivated TogglableBase._isActive TogglableBase.IsActive TogglableBase.OnActivated TogglableBase.OnDeactivated TogglableBase.CanBeInterrupted TogglableBase.InputButton TogglableBase.SnapToActivatedState() TogglableBase.SnapToDeactivatedState() TogglableBase.Initialize() TogglableBase.Toggle(CancellationToken) TogglableBase.DoNormalInteraction(CancellationToken) TogglableBase.GetPromptPrefix() TogglableBase.GetPromptSuffix() InteractableBase.OnInteractionStarted InteractableBase.OnInteractionPaused InteractableBase.OnInteractionResumed InteractableBase.OnInteractionCompleted InteractableBase.CurState InteractableBase.LastEvaluationResult InteractableBase.InteractionHoldTime InteractableBase.DoDisabledInteraction(CancellationToken) InteractableBase.InitializeInteraction() InteractableBase.PauseInteraction() InteractableBase.CompleteInteraction() InteractableBase.ResumeInteraction() InteractableBase.EvaluateInteractionConditions(PlayerInteractionFinder) InteractableBase.EvaluateInteractionConditionsInternal(PlayerInteractionFinder) Methods DoActivateInteraction(CancellationToken) protected override UniTask DoActivateInteraction(CancellationToken cancellationToken) Parameters cancellationToken CancellationToken Returns UniTask DoDeactivateInteraction(CancellationToken) protected override UniTask DoDeactivateInteraction(CancellationToken cancellationToken) Parameters cancellationToken CancellationToken Returns UniTask HandleInteractionCompleted() Called when an interaction is completed protected override void HandleInteractionCompleted() HandleInteractionPause() Called when an interaction is paused protected override void HandleInteractionPause() HandleInteractionResumed() Called when a paused interaction is resumed protected override void HandleInteractionResumed() HandleInteractionStarted() Called before the interaction task is started protected override void HandleInteractionStarted()"
  },
  "api/Studio23.SS2.InteractionSystem.Samples.Demo1.OpenableDoor.html": {
    "href": "api/Studio23.SS2.InteractionSystem.Samples.Demo1.OpenableDoor.html",
    "title": "Class OpenableDoor | |",
    "keywords": "Class OpenableDoor Namespace Studio23.SS2.InteractionSystem.Samples.Demo1 public class OpenableDoor : OpenableBase Inheritance object InteractableBase OpenableBase OpenableDoor Inherited Members OpenableBase._objectName OpenableBase.InputButton OpenableBase.OnOpened OpenableBase.CanBeInterrupted OpenableBase.HandleInteractionStarted() OpenableBase.HandleInteractionPause() OpenableBase.HandleInteractionResumed() OpenableBase.HandleInteractionCompleted() OpenableBase.DoNormalInteraction(CancellationToken) OpenableBase.EvaluateInteractionConditionsInternal(PlayerInteractionFinder) OpenableBase.GetPromptPrefix() InteractableBase.OnInteractionStarted InteractableBase.OnInteractionPaused InteractableBase.OnInteractionResumed InteractableBase.OnInteractionCompleted InteractableBase.CurState InteractableBase.LastEvaluationResult InteractableBase.InteractionHoldTime InteractableBase.InitializeInteraction() InteractableBase.PauseInteraction() InteractableBase.CompleteInteraction() InteractableBase.ResumeInteraction() InteractableBase.EvaluateInteractionConditions(PlayerInteractionFinder) Fields DoorAnimTime public float DoorAnimTime Field Value float DoorObject public GameObject DoorObject Field Value GameObject Methods DoDisabledInteraction(CancellationToken) public override UniTask DoDisabledInteraction(CancellationToken token) Parameters token CancellationToken Returns UniTask DoOpenInteraction(CancellationToken) protected override UniTask DoOpenInteraction(CancellationToken token) Parameters token CancellationToken Returns UniTask GetPromptSuffix() Interaction prompt suffix that appears after the prompt public override string GetPromptSuffix() Returns string Initialize() Called on start() protected override void Initialize() SnapToClosedState() public override void SnapToClosedState() SnapToOpenState() public override void SnapToOpenState()"
  },
  "api/Studio23.SS2.InteractionSystem.Samples.Demo1.Scripts.TestPlayerController.html": {
    "href": "api/Studio23.SS2.InteractionSystem.Samples.Demo1.Scripts.TestPlayerController.html",
    "title": "Class TestPlayerController | |",
    "keywords": "Class TestPlayerController Namespace Studio23.SS2.InteractionSystem.Samples.Demo1.Scripts public class TestPlayerController : MonoBehaviour Inheritance object TestPlayerController"
  },
  "api/Studio23.SS2.InteractionSystem.Samples.Demo1.Scripts.html": {
    "href": "api/Studio23.SS2.InteractionSystem.Samples.Demo1.Scripts.html",
    "title": "Namespace Studio23.SS2.InteractionSystem.Samples.Demo1.Scripts | |",
    "keywords": "Namespace Studio23.SS2.InteractionSystem.Samples.Demo1.Scripts Classes TestPlayerController"
  },
  "api/Studio23.SS2.InteractionSystem.Samples.Demo1.TestCharacterController.html": {
    "href": "api/Studio23.SS2.InteractionSystem.Samples.Demo1.TestCharacterController.html",
    "title": "Class TestCharacterController | |",
    "keywords": "Class TestCharacterController Namespace Studio23.SS2.InteractionSystem.Samples.Demo1 public class TestCharacterController : MonoBehaviour Inheritance object TestCharacterController Methods Toggle(bool) public void Toggle(bool isControllerEnabled) Parameters isControllerEnabled bool"
  },
  "api/Studio23.SS2.InteractionSystem.Samples.Demo1.TestCharacterInputs.html": {
    "href": "api/Studio23.SS2.InteractionSystem.Samples.Demo1.TestCharacterInputs.html",
    "title": "Class TestCharacterInputs | |",
    "keywords": "Class TestCharacterInputs Namespace Studio23.SS2.InteractionSystem.Samples.Demo1 public class TestCharacterInputs : MonoBehaviour Inheritance object TestCharacterInputs Fields AnalogMovement public bool AnalogMovement Field Value bool CursorInputForLook public bool CursorInputForLook Field Value bool CursorLocked public bool CursorLocked Field Value bool Jump public bool Jump Field Value bool Look public Vector2 Look Field Value Vector2 Move public Vector2 Move Field Value Vector2 Sprint public bool Sprint Field Value bool Methods JumpInput(bool) public void JumpInput(bool newJumpState) Parameters newJumpState bool LookInput(Vector2) public void LookInput(Vector2 newLookDirection) Parameters newLookDirection Vector2 MoveInput(Vector2) public void MoveInput(Vector2 newMoveDirection) Parameters newMoveDirection Vector2 OnJump(InputValue) public void OnJump(InputValue value) Parameters value InputValue OnLook(InputValue) public void OnLook(InputValue value) Parameters value InputValue OnMove(InputValue) public void OnMove(InputValue value) Parameters value InputValue OnSprint(InputValue) public void OnSprint(InputValue value) Parameters value InputValue SprintInput(bool) public void SprintInput(bool newSprintState) Parameters newSprintState bool"
  },
  "api/Studio23.SS2.InteractionSystem.Samples.Demo1.TestInspectable.html": {
    "href": "api/Studio23.SS2.InteractionSystem.Samples.Demo1.TestInspectable.html",
    "title": "Class TestInspectable | |",
    "keywords": "Class TestInspectable Namespace Studio23.SS2.InteractionSystem.Samples.Demo1 public class TestInspectable : InspectableBase Inheritance object InteractableBase InspectableBase TestInspectable Inherited Members InspectableBase._objectName InspectableBase._inspectionTarget InspectableBase._inspectionRotationSensitivity InspectableBase._inspectionOffset InspectableBase.OriginalInspectionTargetScale InspectableBase.InspectionScale InspectableBase.InspectionOffset InspectableBase.InspectionTargetMaxOffset InspectableBase.InspectionTargetMaxZoom InspectableBase.InspectionRotationSensitivity InspectableBase.InputButton InspectableBase.CanBeInterrupted InspectableBase.GetPromptPrefix() InspectableBase.GetInspectionTarget() InspectableBase.DoNormalInteraction(CancellationToken) InteractableBase.OnInteractionStarted InteractableBase.OnInteractionPaused InteractableBase.OnInteractionResumed InteractableBase.OnInteractionCompleted InteractableBase.CurState InteractableBase.LastEvaluationResult InteractableBase.InteractionHoldTime InteractableBase.InitializeInteraction() InteractableBase.PauseInteraction() InteractableBase.CompleteInteraction() InteractableBase.ResumeInteraction() InteractableBase.EvaluateInteractionConditions(PlayerInteractionFinder) InteractableBase.EvaluateInteractionConditionsInternal(PlayerInteractionFinder) Methods Awake() protected override void Awake() DoDisabledInteraction(CancellationToken) public override UniTask DoDisabledInteraction(CancellationToken token) Parameters token CancellationToken Returns UniTask GetPromptSuffix() Interaction prompt suffix that appears after the prompt public override string GetPromptSuffix() Returns string HandleInteractionCompleted() Called when an interaction is completed protected override void HandleInteractionCompleted() HandleInteractionPause() Called when an interaction is paused protected override void HandleInteractionPause() HandleInteractionResumed() Called when a paused interaction is resumed protected override void HandleInteractionResumed() HandleInteractionStarted() Called before the interaction task is started protected override void HandleInteractionStarted() Initialize() Called on start() protected override void Initialize()"
  },
  "api/Studio23.SS2.InteractionSystem.Samples.Demo1.TestInventory.html": {
    "href": "api/Studio23.SS2.InteractionSystem.Samples.Demo1.TestInventory.html",
    "title": "Class TestInventory | |",
    "keywords": "Class TestInventory Namespace Studio23.SS2.InteractionSystem.Samples.Demo1 public class TestInventory : MonoBehaviourSingletonPersistent<TestInventory> Inheritance object TestInventory Methods AddItem(string) public void AddItem(string item) Parameters item string ContainsItem(string) public bool ContainsItem(string item) Parameters item string Returns bool RemoveItem(string) public void RemoveItem(string item) Parameters item string initialize() protected override void initialize()"
  },
  "api/Studio23.SS2.InteractionSystem.Samples.Demo1.TestInventoryInteractionCondition.html": {
    "href": "api/Studio23.SS2.InteractionSystem.Samples.Demo1.TestInventoryInteractionCondition.html",
    "title": "Class TestInventoryInteractionCondition | |",
    "keywords": "Class TestInventoryInteractionCondition Namespace Studio23.SS2.InteractionSystem.Samples.Demo1 [Serializable] public class TestInventoryInteractionCondition : InteractionCondition Inheritance object InteractionCondition TestInventoryInteractionCondition Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Evaluate(PlayerInteractionFinder) Returns whether this condition is true for the interaction context For now we assume interaction context is just the player interaction finder public override InteractionConditionResult Evaluate(PlayerInteractionFinder playerInteractionFinder) Parameters playerInteractionFinder PlayerInteractionFinder Returns InteractionConditionResult"
  },
  "api/Studio23.SS2.InteractionSystem.Samples.Demo1.TestItemPickup.html": {
    "href": "api/Studio23.SS2.InteractionSystem.Samples.Demo1.TestItemPickup.html",
    "title": "Class TestItemPickup | |",
    "keywords": "Class TestItemPickup Namespace Studio23.SS2.InteractionSystem.Samples.Demo1 public class TestItemPickup : ItemPickupBase Inheritance object InteractableBase ItemPickupBase TestItemPickup Inherited Members ItemPickupBase.HandleInteractionCompleted() ItemPickupBase.GetPromptPrefix() ItemPickupBase.GetPromptSuffix() ItemPickupBase.InputButton InteractableBase.OnInteractionStarted InteractableBase.OnInteractionPaused InteractableBase.OnInteractionResumed InteractableBase.OnInteractionCompleted InteractableBase.CurState InteractableBase.LastEvaluationResult InteractableBase.InteractionHoldTime InteractableBase.InitializeInteraction() InteractableBase.PauseInteraction() InteractableBase.CompleteInteraction() InteractableBase.ResumeInteraction() InteractableBase.EvaluateInteractionConditions(PlayerInteractionFinder) InteractableBase.EvaluateInteractionConditionsInternal(PlayerInteractionFinder) Properties CanBeInterrupted Prevents another subinteraction from starting when this is running public override bool CanBeInterrupted { get; } Property Value bool PickUpName public override string PickUpName { get; } Property Value string Methods AddPickupToInventory() public override void AddPickupToInventory() DoDisabledInteraction(CancellationToken) public override UniTask DoDisabledInteraction(CancellationToken token) Parameters token CancellationToken Returns UniTask DoNormalInteraction(CancellationToken) The actual async interaction task The interactable should assume that it can be interrupted any time during interaction public override UniTask DoNormalInteraction(CancellationToken token) Parameters token CancellationToken Returns UniTask HandleInteractionPause() Called when an interaction is paused protected override void HandleInteractionPause() HandleInteractionResumed() Called when a paused interaction is resumed protected override void HandleInteractionResumed() HandleInteractionStarted() Called before the interaction task is started protected override void HandleInteractionStarted() Initialize() Called on start() protected override void Initialize()"
  },
  "api/Studio23.SS2.InteractionSystem.Samples.Demo1.html": {
    "href": "api/Studio23.SS2.InteractionSystem.Samples.Demo1.html",
    "title": "Namespace Studio23.SS2.InteractionSystem.Samples.Demo1 | |",
    "keywords": "Namespace Studio23.SS2.InteractionSystem.Samples.Demo1 Classes BasicInstantSwitch BiWayDoor ClosableDoor InstantSwitch A basic switch that sends activation and deactivation events instantly OpenableDoor TestCharacterController TestCharacterInputs TestInspectable TestInventory TestInventoryInteractionCondition TestItemPickup"
  },
  "api/Studio23.SS2.InteractionSystem.UI.InputPromptsView.html": {
    "href": "api/Studio23.SS2.InteractionSystem.UI.InputPromptsView.html",
    "title": "Class InputPromptsView | |",
    "keywords": "Class InputPromptsView Namespace Studio23.SS2.InteractionSystem.UI public class InputPromptsView : InputPromptsViewBase Inheritance object InputPromptsViewBase InputPromptsView Methods GetPromptForButton(InputButtonSlot) public override InteractButtonPromptViewBase GetPromptForButton(InputButtonSlot buttonSlot) Parameters buttonSlot InputButtonSlot Returns InteractButtonPromptViewBase HidePrompts() public override void HidePrompts() ShowPrompts() public override void ShowPrompts() UpdatePromptsView(InputPromptsModel) public override void UpdatePromptsView(InputPromptsModel model) Parameters model InputPromptsModel"
  },
  "api/Studio23.SS2.InteractionSystem.UI.InputPromptsViewBase.html": {
    "href": "api/Studio23.SS2.InteractionSystem.UI.InputPromptsViewBase.html",
    "title": "Class InputPromptsViewBase | |",
    "keywords": "Class InputPromptsViewBase Namespace Studio23.SS2.InteractionSystem.UI public abstract class InputPromptsViewBase : MonoBehaviour Inheritance object InputPromptsViewBase Derived InputPromptsView Methods GetPromptForButton(InputButtonSlot) public abstract InteractButtonPromptViewBase GetPromptForButton(InputButtonSlot buttonSlot) Parameters buttonSlot InputButtonSlot Returns InteractButtonPromptViewBase HidePrompts() public abstract void HidePrompts() ShowPrompts() public abstract void ShowPrompts() UpdatePromptsView(InputPromptsModel) public abstract void UpdatePromptsView(InputPromptsModel model) Parameters model InputPromptsModel"
  },
  "api/Studio23.SS2.InteractionSystem.UI.InteractButtonPromptView.html": {
    "href": "api/Studio23.SS2.InteractionSystem.UI.InteractButtonPromptView.html",
    "title": "Class InteractButtonPromptView | |",
    "keywords": "Class InteractButtonPromptView Namespace Studio23.SS2.InteractionSystem.UI public class InteractButtonPromptView : InteractButtonPromptViewBase Inheritance object InteractButtonPromptViewBase InteractButtonPromptView Methods SetProgress(float) public override void SetProgress(float progress) Parameters progress float ToggleProgressSlider(bool) public override void ToggleProgressSlider(bool shouldShowSlider) Parameters shouldShowSlider bool showInteractable(InteractableBase) public override void showInteractable(InteractableBase interactableBase) Parameters interactableBase InteractableBase"
  },
  "api/Studio23.SS2.InteractionSystem.UI.InteractButtonPromptViewBase.html": {
    "href": "api/Studio23.SS2.InteractionSystem.UI.InteractButtonPromptViewBase.html",
    "title": "Class InteractButtonPromptViewBase | |",
    "keywords": "Class InteractButtonPromptViewBase Namespace Studio23.SS2.InteractionSystem.UI public abstract class InteractButtonPromptViewBase : MonoBehaviour Inheritance object InteractButtonPromptViewBase Derived InteractButtonPromptView Methods SetProgress(float) public abstract void SetProgress(float progress) Parameters progress float ToggleProgressSlider(bool) public abstract void ToggleProgressSlider(bool shouldShowSlider) Parameters shouldShowSlider bool showInteractable(InteractableBase) public abstract void showInteractable(InteractableBase interactableBase) Parameters interactableBase InteractableBase"
  },
  "api/Studio23.SS2.InteractionSystem.UI.html": {
    "href": "api/Studio23.SS2.InteractionSystem.UI.html",
    "title": "Namespace Studio23.SS2.InteractionSystem.UI | |",
    "keywords": "Namespace Studio23.SS2.InteractionSystem.UI Classes InputPromptsView InputPromptsViewBase InteractButtonPromptView InteractButtonPromptViewBase"
  },
  "api/index.html": {
    "href": "api/index.html",
    "title": "| |",
    "keywords": "This is the documentation for the Scripting APIs of this package."
  },
  "changelog/CHANGELOG.html": {
    "href": "changelog/CHANGELOG.html",
    "title": "Changelog | |",
    "keywords": "Changelog [v1.1.3] - 11-24-2023 Updated Refactored Namespace [v1.1.0] Disabled interaction handling [v1.0.0] Initial version"
  },
  "index.html": {
    "href": "index.html",
    "title": "| |",
    "keywords": "This page redirects to the manual."
  },
  "license/LICENSE.html": {
    "href": "license/LICENSE.html",
    "title": "| |",
    "keywords": "MIT License Copyright (c) 2023 Studio-23 Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
  },
  "manual/index.html": {
    "href": "manual/index.html",
    "title": "Interaction System | |",
    "keywords": "Interaction System Introducing an Interaction System package for Unity. Table of Contents Installation Usage Getting Started Extensions Installation Install via Git URL You can also use the \"Install from Git URL\" option from Unity Package Manager to install the package. https://github.com/Studio-23-xyz/InteractionSystem.git#upm Usage PlayerInteractionFinder The PlayerInteractionFinder class is responsible for locating interactable objects based on the camera's position and orientation. Example Usage: // Attach the PlayerInteractionFinder component to a GameObject in your scene. // The camera reference should be assigned in the inspector. // The Interaction Layer Mask and Obstacle Layer Mask can be adjusted as needed. // Set other parameters such as Interaction Find Distance and Interaction Sphere Cast Radius. public class YourClass : MonoBehaviour { [SerializeField] private PlayerInteractionFinder interactionFinder; private void Start() { // Optionally, set the main camera explicitly (if not set in the inspector). interactionFinder.SetCam(Camera.main); } private void Update() { List<InteractableBase> interactables = interactionFinder.FindInteractables(); // Use the list of interactables as needed. } } InteractionManager The InteractionManager class manages the interaction stack and handles interaction events. Example Usage: // Attach the InteractionManager component to a GameObject in your scene. // Set up the required references and events. public class YourClass : MonoBehaviour { [SerializeField] private InteractionManager interactionManager; private void Start() { // Subscribe to interaction events if needed. interactionManager.OnInteractionChainStarted += YourMethod; interactionManager.OnInteractionChainEnded += YourMethod; } // Other relevant methods and event handlers... } InteractionInputManager The InteractionInputManager class manages input actions and buttons related to interactions. Example Usage: // Attach the InteractionInputManager component to a GameObject in your scene. // Set up input actions and buttons as needed. public class YourClass : MonoBehaviour { [SerializeField] private InteractionInputManager inputManager; private void Start() { // Subscribe to input events if needed. inputManager.OnInteractableConfirmed += YourMethod; inputManager.OnInteractableConfirmationStarted += YourMethod; inputManager.OnInteractableConfirmationCancelled += YourMethod; } // Other relevant methods and event handlers... } InspectionManager The InspectionManager class handles the inspection of interactable objects. InputPromptsController Manage input prompts for interactions."
  }
}